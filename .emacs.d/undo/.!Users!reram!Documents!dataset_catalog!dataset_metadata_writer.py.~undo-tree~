"e98c8c3803d1df6f1c657cacd1e41a381d42e667"
#s(undo-tree [nil ([nil ([nil ([nil ([nil (#2=[nil nil ((1801 . 1803) (1799 . 1801)) nil (23391 32654 172061 0) 0 nil]) ((2493 . 2497)) nil (23391 32654 172064 0) 0 nil]) ((2461 . 2468)) nil (23391 32654 172066 0) 0 nil]) ((#("
" 0 1 (fontified t)) . 1789) (undo-tree-id63 . -1) (undo-tree-id64 . -1)) nil (23391 32654 172071 0) 0 nil]) ((1777 . 1788) (1772 . 1777) (t 23391 32254 0 0) 1734) nil (23391 32654 172073 0) 0 nil] [nil nil ((1 . 3) (#("from redminelib import Redmine
import getpass
import logging
import requests
import pandas as pd
import json
from requests.auth import HTTPBasicAuth
import xmltodict

CHANMINE_URL = \"https://chanmine.bwh.harvard.edu\"

global username
global password

username = input('Username: ')
password = getpass.getpass()

def poll_chanmine():
    url1 = \"https://chanmine.bwh.harvard.edu/issues.xml?project=sggchortproject&tracker_id=7&limit=100&page=1\"
    url2 = \"https://chanmine.bwh.harvard.edu/issues.xml?project=sggchortproject&tracker_id=7&limit=100&page=2\"
    r1 = requests.get(url1, auth=HTTPBasicAuth(username, password), verify=False)
    r2 = requests.get(url2, auth=HTTPBasicAuth(username, password), verify=False)

    doc1 = json.loads(json.dumps(xmltodict.parse(r1.text)))
    doc2 = json.loads(json.dumps(xmltodict.parse(r2.text)))
    doc = doc1['issues']['issue'] + doc2['issues']['issue']
    count = " 0 4 (fontified t face font-lock-keyword-face) 4 16 (fontified t) 16 22 (fontified t face font-lock-keyword-face) 22 31 (fontified t) 31 37 (fontified t face font-lock-keyword-face) 37 46 (fontified t) 46 52 (fontified t face font-lock-keyword-face) 52 61 (fontified t) 61 67 (fontified t face font-lock-keyword-face) 67 77 (fontified t) 77 83 (fontified t face font-lock-keyword-face) 83 91 (fontified t) 91 93 (fontified t face font-lock-keyword-face) 93 97 (fontified t) 97 103 (fontified t face font-lock-keyword-face) 103 109 (fontified t) 109 113 (fontified t face font-lock-keyword-face) 113 128 (fontified t) 128 134 (fontified t face font-lock-keyword-face) 134 149 (fontified t) 149 155 (fontified t face font-lock-keyword-face) 155 167 (fontified t) 167 179 (fontified t face font-lock-variable-name-face) 179 182 (fontified t) 182 183 (syntax-table #1=(15) fontified t face font-lock-string-face) 183 215 (fontified t face font-lock-string-face) 215 216 (syntax-table #1# fontified t face font-lock-string-face) 216 218 (fontified t) 218 224 (fontified t face font-lock-keyword-face) 224 234 (fontified t) 234 240 (fontified t face font-lock-keyword-face) 240 251 (fontified t) 251 259 (fontified t face font-lock-variable-name-face) 259 262 (fontified t) 262 267 (fontified t face font-lock-builtin-face) 267 268 (fontified t) 268 269 (syntax-table #1# fontified t face font-lock-string-face) 269 279 (fontified t face font-lock-string-face) 279 280 (syntax-table #1# fontified t face font-lock-string-face) 280 282 (fontified t) 282 290 (fontified t face font-lock-variable-name-face) 290 312 (fontified t) 312 315 (fontified t face font-lock-keyword-face) 315 316 (fontified t) 316 329 (fontified t face font-lock-function-name-face) 329 337 (fontified t) 337 341 (fontified t face font-lock-variable-name-face) 341 344 (fontified t) 344 345 (syntax-table #1# fontified t face font-lock-string-face) 345 442 (fontified t face font-lock-string-face) 442 443 (syntax-table #1# fontified t face font-lock-string-face) 443 448 (fontified t) 448 452 (fontified t face font-lock-variable-name-face) 452 455 (fontified t) 455 456 (syntax-table #1# fontified t face font-lock-string-face) 456 500 (fontified t face font-lock-string-face) 500 553 (fontified t face font-lock-string-face) 553 554 (syntax-table #1# fontified t face font-lock-string-face) 554 555 (fontified t) 555 559 (fontified t) 559 561 (fontified t face font-lock-variable-name-face) 561 630 (fontified t) 630 635 (fontified t face font-lock-constant-face) 635 641 (fontified t) 641 643 (fontified t face font-lock-variable-name-face) 643 712 (fontified t) 712 717 (fontified t face font-lock-constant-face) 717 724 (fontified t) 724 728 (fontified t face font-lock-variable-name-face) 728 784 (fontified t) 784 788 (fontified t face font-lock-variable-name-face) 788 844 (fontified t) 844 847 (fontified t face font-lock-variable-name-face) 847 855 (fontified t) 855 856 (fontified t syntax-table #1# face font-lock-string-face) 856 862 (fontified t face font-lock-string-face) 862 863 (fontified t syntax-table #1# face font-lock-string-face) 863 865 (fontified t) 865 866 (fontified t syntax-table #1# face font-lock-string-face) 866 871 (fontified t face font-lock-string-face) 871 872 (fontified t syntax-table #1# face font-lock-string-face) 872 881 (fontified t) 881 882 (fontified t syntax-table #1# face font-lock-string-face) 882 888 (fontified t face font-lock-string-face) 888 889 (fontified t syntax-table #1# face font-lock-string-face) 889 891 (fontified t) 891 892 (fontified t syntax-table #1# face font-lock-string-face) 892 897 (fontified t face font-lock-string-face) 897 898 (fontified t syntax-table #1# face font-lock-string-face) 898 904 (fontified t) 904 909 (fontified t face font-lock-variable-name-face) 909 912 (fontified t)) . 1) (undo-tree-id0 . -912) (undo-tree-id1 . -312) (undo-tree-id2 . -315) (undo-tree-id3 . -397) (undo-tree-id4 . -412) (undo-tree-id5 . -508) (undo-tree-id6 . -523) (undo-tree-id7 . -630) (undo-tree-id8 . -635) (undo-tree-id9 . -712) (undo-tree-id10 . -717) (undo-tree-id11 . -904) (undo-tree-id12 . -909) (undo-tree-id13 . -444) (undo-tree-id14 . -444) (undo-tree-id15 . -900) (undo-tree-id16 . -900) (undo-tree-id17 . -840) (undo-tree-id18 . -840) (undo-tree-id19 . -780) (undo-tree-id20 . -780) (undo-tree-id21 . -720) (undo-tree-id22 . -720) (undo-tree-id23 . -719) (undo-tree-id24 . -719) (undo-tree-id25 . -637) (undo-tree-id26 . -637) (undo-tree-id27 . -555) (undo-tree-id28 . -555) (undo-tree-id29 . -444) (undo-tree-id30 . -444) (undo-tree-id31 . -333) (undo-tree-id32 . -333) (undo-tree-id33 . -312) (undo-tree-id34 . -312) (undo-tree-id35 . -312) (undo-tree-id36 . -912) (undo-tree-id37 . -574) (undo-tree-id38 . -574) (undo-tree-id39 . -574) (undo-tree-id40 . -912) (undo-tree-id41 . -312) (undo-tree-id42 . -912) (undo-tree-id43 . -912) (undo-tree-id44 . -312) (undo-tree-id45 . -333) (undo-tree-id46 . -334) (undo-tree-id47 . -444) (undo-tree-id48 . -445) (undo-tree-id49 . -555) (undo-tree-id50 . -556) (undo-tree-id51 . -637) (undo-tree-id52 . -638) (undo-tree-id53 . -720) (undo-tree-id54 . -721) (undo-tree-id55 . -780) (undo-tree-id56 . -781) (undo-tree-id57 . -840) (undo-tree-id58 . -841) (undo-tree-id59 . -900) (undo-tree-id60 . -901) (undo-tree-id61 . -912) (t 23391 32254 0 0)) ((1 . 913) (#("jj" 0 2 (fontified t)) . 1) (undo-tree-id62 . -1)) (23391 32588 531023 0) 0 nil]) nil nil (23391 32588 531902 0) 0 nil] #2# 1547 6 nil)