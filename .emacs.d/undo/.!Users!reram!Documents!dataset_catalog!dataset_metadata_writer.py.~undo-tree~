"adc6792620b833f1d8779a59bf0eda3532a0b38f"
#s(undo-tree [nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil (#2=[nil nil ((1431 . 1434) (#("p" 0 1 (fontified t)) . -1431) (undo-tree-id1832 . -1) 1432 (1423 . 1432) (#(")" 0 1 (fontified t)) . -1423) (undo-tree-id1833 . -1) (undo-tree-id1834 . 1) (undo-tree-id1835 . -1) 1424 (1418 . 1424) (1413 . 1418) 1413) nil (23429 32566 730035 0) 0 nil]) ((1604 . 1606) (1542 . 1544) (1480 . 1482) (1418 . 1420) 1594) nil (23429 32566 730040 0) 0 nil]) ((1411 . 1412) (#("," 0 1 (fontified t)) . -1411) (undo-tree-id1836 . -1) 1412 (#("
" 0 1 (fontified t)) . -1412) (undo-tree-id1837 . -1) (undo-tree-id1838 . -1) (undo-tree-id1839 . -1) 1413 (#("    " 0 4 (fontified t)) . -1413) (undo-tree-id1840 . -4) 1417 (#("    " 0 4 (fontified t)) . -1417) (undo-tree-id1841 . -4) 1421 (#("    " 0 4 (fontified t)) . -1421) (undo-tree-id1842 . -4) 1425 (#("    " 0 4 (fontified t)) . -1425) (undo-tree-id1843 . -4) 1429 (#("    " 0 4 (fontified t)) . -1429) (undo-tree-id1844 . -4) 1433 (#("    " 0 4 (fontified t)) . -1433) (undo-tree-id1845 . -4) 1437 (#("    " 0 4 (fontified t)) . -1437) (undo-tree-id1846 . -4) 1441 (#("    " 0 4 (fontified t)) . -1441) (undo-tree-id1847 . -4) 1445 (#("  " 0 2 (fontified t)) . -1445) (undo-tree-id1848 . -2) 1447 (1412 . 1447) (1410 . 1412) (#("u" 0 1 (fontified t)) . -1410) (undo-tree-id1849 . -1) 1411 (1409 . 1411) (#(" " 0 1 (fontified t)) . -1409) (undo-tree-id1850 . -1) (#("=" 0 1 (fontified t)) . -1410) (undo-tree-id1851 . -1) (#(" " 0 1 (fontified t)) . -1411) (undo-tree-id1852 . -1) 1412 (1403 . 1412) (#("e" 0 1 (fontified t)) . -1403) (undo-tree-id1853 . -1) (#("k" 0 1 (fontified t)) . -1404) (undo-tree-id1854 . -1) (#("r" 0 1 (fontified t)) . -1405) (undo-tree-id1855 . -1) 1406 (1399 . 1406) (1364 . 1399) (1363 . 1364) (1353 . 1363) (#("project_" 0 8 (fontified t)) . -1353) (undo-tree-id1856 . -8) 1361 (1353 . 1361) (#("o" 0 1 (fontified t)) . -1353) (undo-tree-id1857 . -1) (#("r" 0 1 (fontified t face font-lock-keyword-face)) . -1354) (undo-tree-id1858 . -1) (#("i" 0 1 (fontified t)) . -1355) (undo-tree-id1859 . -1) (#("j" 0 1 (fontified t)) . -1356) (undo-tree-id1860 . -1) 1357 (1353 . 1357) (1345 . 1353) (#("e" 0 1 (fontified t)) . -1345) (undo-tree-id1861 . -1) (#("j" 0 1 (fontified t)) . -1346) (undo-tree-id1862 . -1) (#("c" 0 1 (fontified t)) . -1347) (undo-tree-id1863 . -1) 1348 (1345 . 1348) (#("k" 0 1 (fontified t)) . -1345) (undo-tree-id1864 . -1) (#("c" 0 1 (fontified t)) . -1346) (undo-tree-id1865 . -1) 1347 (1334 . 1347) (1318 . 1334) (#("_" 0 1 (fontified t)) . -1318) (undo-tree-id1866 . -1) (#("a" 0 1 (fontified t)) . -1319) (undo-tree-id1867 . -1) (#("l" 0 1 (fontified t)) . -1320) (undo-tree-id1868 . -1) (#("l" 0 1 (fontified t)) . -1321) (undo-tree-id1869 . -1) (#(" " 0 1 (fontified t)) . -1322) (undo-tree-id1870 . -1) (#("=" 0 1 (fontified t)) . -1323) (undo-tree-id1871 . -1) (#(" " 0 1 (fontified t)) . -1324) (undo-tree-id1872 . -1) (#("r" 0 1 (fontified t)) . -1325) (undo-tree-id1873 . -1) (#("e" 0 1 (fontified t)) . -1326) (undo-tree-id1874 . -1) (#("d" 0 1 (fontified t)) . -1327) (undo-tree-id1875 . -1) (#("m" 0 1 (fontified t)) . -1328) (undo-tree-id1876 . -1) 1329 (1312 . 1329) (1307 . 1312) 1242) nil (23429 32566 730093 0) 0 nil]) ((#("    " 0 4 (fontified t)) . -1158) (undo-tree-id1877 . -4) 1162 (1157 . 1162) 1080) nil (23429 32566 730103 0) 0 nil]) ((nil rear-nonsticky nil 1161 . 1162) (#("
" 0 1 (fontified nil)) . -1306) (1157 . 1307) 1076) nil (23429 32566 730106 0) 0 nil] [nil nil ((#("    # Initialize Redmine
    redmine = Redmine(CHANMINE_URL, username=username,
                      password=password, requests={'verify': False})
" 0 4 (fontified t) 4 6 (fontified t face font-lock-comment-delimiter-face) 6 25 (fontified t face font-lock-comment-face) 25 29 (fontified t) 29 36 (fontified t face font-lock-variable-name-face) 36 40 (fontified t) 40 49 (fontified t) 49 80 (fontified t) 80 97 (fontified t) 97 131 (fontified t) 131 132 (syntax-table #1=(15) fontified t face font-lock-string-face) 132 138 (fontified t face font-lock-string-face) 138 139 (syntax-table #1# fontified t face font-lock-string-face) 139 141 (fontified t) 141 146 (fontified t face font-lock-constant-face) 146 149 (fontified t)) . 2694) (undo-tree-id1776 . -84) (undo-tree-id1777 . -4) (undo-tree-id1778 . -84) (undo-tree-id1779 . -149) (undo-tree-id1780 . -149) (undo-tree-id1781 . -80) (undo-tree-id1782 . -80) (undo-tree-id1783 . -25) (undo-tree-id1784 . -25) (undo-tree-id1785 . -84) (undo-tree-id1786 . -1) (undo-tree-id1787 . -25) (undo-tree-id1788 . -26) (undo-tree-id1789 . -80) (undo-tree-id1790 . -81) (undo-tree-id1791 . -84) (undo-tree-id1792 . -85) (undo-tree-id1793 . -88) (undo-tree-id1794 . -89) (undo-tree-id1795 . -92) (undo-tree-id1796 . -93) (undo-tree-id1797 . -96) (undo-tree-id1798 . -97) (undo-tree-id1799 . -100) (undo-tree-id1800 . -101) (undo-tree-id1801 . -149) (undo-tree-id1802 . -4) (undo-tree-id1803 . -84) 2778) ((2694 . 2843)) (23429 32332 625864 0) 0 nil]) ((#("# Poll Chanmine to retrievedd
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 29 (fontified t face font-lock-comment-face) 29 30 (fontified t face font-lock-comment-face)) . 751) (undo-tree-id1804 . 1) (undo-tree-id1805 . -30) (undo-tree-id1806 . -30) (undo-tree-id1807 . -28) 779) nil (23429 32332 626345 0) 0 nil]) ((778 . 780) (765 . 778) (#(" " 0 1 (fontified t face font-lock-comment-face)) . -765) (undo-tree-id1808 . -1) (#("t" 0 1 (fontified t face font-lock-comment-face)) . -766) (undo-tree-id1809 . -1) (#("r" 0 1 (fontified t face font-lock-comment-face)) . -767) (undo-tree-id1810 . -1) (#("o" 0 1 (fontified t face font-lock-comment-face)) . -768) (undo-tree-id1811 . -1) (#(" " 0 1 (fontified t face font-lock-comment-face)) . -769) (undo-tree-id1812 . -1) 770 (765 . 770) (#("g" 0 1 (fontified t face font-lock-comment-face)) . -765) (undo-tree-id1813 . -1) (#(" " 0 1 (fontified t face font-lock-comment-face)) . -766) (undo-tree-id1814 . -1) 767 (751 . 767) (#("P" 0 1 (fontified t)) . -751) (undo-tree-id1815 . -1) 752 (751 . 752) (750 . 751) 750) nil (23429 32332 625885 0) 0 nil]) ((744 . 749) (#("d" 0 1 (fontified t face font-lock-comment-face)) . -744) (undo-tree-id1816 . -1) (#("m" 0 1 (fontified t face font-lock-comment-face)) . -745) (undo-tree-id1817 . -1) (#("i" 0 1 (fontified t face font-lock-comment-face)) . -746) (undo-tree-id1818 . -1) 747 (744 . 747) (#("m" 0 1 (fontified t face font-lock-comment-face)) . -744) (undo-tree-id1819 . -1) 745 (728 . 745) (#("k" 0 1 (fontified t face font-lock-comment-face)) . -728) (undo-tree-id1820 . -1) (#("e" 0 1 (fontified t face font-lock-comment-face)) . -729) (undo-tree-id1821 . -1) (#("c" 0 1 (fontified t face font-lock-comment-face)) . -730) (undo-tree-id1822 . -1) 731 (728 . 731) (#("e" 0 1 (fontified t face font-lock-comment-face)) . -728) (undo-tree-id1823 . -1) 729 (726 . 729) (723 . 726) (#(" " 0 1 (fontified t)) . -723) (undo-tree-id1824 . -1) (#("$" 0 1 (fontified t)) . -724) (undo-tree-id1825 . -1) 725 (723 . 725)) nil (23429 32332 625901 0) 0 nil]) ((722 . 723)) nil (23429 32332 625906 0) 0 nil]) ((#("
" 0 1 (fontified t)) . -691) (undo-tree-id1826 . -1) (undo-tree-id1827 . -1) (undo-tree-id1828 . -1) (#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -692) (undo-tree-id1829 . -1) 693 (692 . 693) (691 . 692) 691) nil (23429 32332 625912 0) 0 nil]) ((564 . 576) (#("a" 0 1 (fontified t face font-lock-comment-face)) . -564) (undo-tree-id1830 . -1) (#("t" 0 1 (fontified t face font-lock-comment-face)) . -565) (undo-tree-id1831 . -1) 566 (562 . 566)) nil (23429 32332 625916 0) 0 nil]) ((458 . 460) (440 . 442)) nil (23429 32332 625917 0) 0 nil] [nil nil ((455 . 456) (#("
" 0 1 (fontified t)) . -455) (undo-tree-id1773 . -1) (undo-tree-id1774 . -1) (undo-tree-id1775 . -1) 440) ((455 . 456) (#(" " 0 1 (fontified t)) . 455)) (23429 32254 729719 0) 0 nil] [nil nil ((455 . 456) (#("
" 0 1 (fontified t)) . -455) (undo-tree-id1770 . -1) (undo-tree-id1771 . -1) (undo-tree-id1772 . -1) 440) ((455 . 456) (#(" " 0 1 (fontified t)) . 455)) (23429 32251 815990 0) 0 nil]) ((#("j2_env = Environment(loader=FileSystemLoader(os.getcwd()), trim_blocks=True)
" 0 6 (fontified t face font-lock-variable-name-face) 6 71 (fontified t) 71 75 (fontified t face font-lock-constant-face) 75 77 (fontified t)) . 674)) nil (23429 32254 729939 0) 0 nil]) ((506 . 508) (473 . 475) 533 (t 23429 25983 0 0)) nil (23429 32251 815997 0) 0 nil]) ((5206 . 5207) (t 23429 25462 0 0)) nil (23429 25983 758114 0) 0 nil]) ((#("
" 0 1 (fontified t)) . 5773) (undo-tree-id1742 . -1) (undo-tree-id1743 . -1) (undo-tree-id1744 . -1) (undo-tree-id1745 . -1) (undo-tree-id1746 . -1) (undo-tree-id1747 . -1)) nil (23429 25462 547229 0) 0 nil]) ((#("def convert_bytes(byte_size):
   if byte_size == 0:
       return \"0B\"
   size_name = (\"B\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\")
   i = int(math.floor(math.log(byte_size, 1024)))
   p = math.pow(1024, i)
   s = round(byte_size / p, 2)
   return \"%s %s\" % (s, size_name[i])
" 0 1 (fontified t face font-lock-keyword-face) 1 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 14 (fontified t face font-lock-function-name-face) 14 15 (fontified t face font-lock-function-name-face) 15 17 (fontified t face font-lock-function-name-face) 17 27 (fontified t) 27 30 (fontified t) 30 33 (fontified t) 33 35 (fontified t face font-lock-keyword-face) 35 52 (fontified t) 52 59 (fontified t) 59 65 (fontified t face font-lock-keyword-face) 65 66 (fontified t) 66 67 (syntax-table #1# fontified t face font-lock-string-face) 67 69 (fontified t face font-lock-string-face) 69 70 (syntax-table #1# fontified t face font-lock-string-face) 70 74 (fontified t) 74 83 (fontified t face font-lock-variable-name-face) 83 87 (fontified t) 87 88 (syntax-table #1# fontified t face font-lock-string-face) 88 89 (fontified t face font-lock-string-face) 89 90 (syntax-table #1# face font-lock-string-face fontified t) 90 92 (fontified t) 92 93 (syntax-table #1# face font-lock-string-face fontified t) 93 95 (face font-lock-string-face fontified t) 95 96 (syntax-table #1# face font-lock-string-face fontified t) 96 98 (fontified t) 98 99 (syntax-table #1# face font-lock-string-face fontified t) 99 101 (face font-lock-string-face fontified t) 101 102 (syntax-table #1# face font-lock-string-face fontified t) 102 104 (fontified t) 104 105 (syntax-table #1# face font-lock-string-face fontified t) 105 107 (face font-lock-string-face fontified t) 107 108 (syntax-table #1# face font-lock-string-face fontified t) 108 110 (fontified t) 110 111 (syntax-table #1# face font-lock-string-face fontified t) 111 113 (face font-lock-string-face fontified t) 113 114 (syntax-table #1# face font-lock-string-face fontified t) 114 116 (fontified t) 116 117 (syntax-table #1# face font-lock-string-face fontified t) 117 119 (face font-lock-string-face fontified t) 119 120 (syntax-table #1# face font-lock-string-face fontified t) 120 122 (fontified t) 122 123 (syntax-table #1# face font-lock-string-face fontified t) 123 125 (face font-lock-string-face fontified t) 125 126 (syntax-table #1# face font-lock-string-face fontified t) 126 128 (fontified t) 128 129 (syntax-table #1# face font-lock-string-face fontified t) 129 131 (face font-lock-string-face fontified t) 131 132 (syntax-table #1# face font-lock-string-face fontified t) 132 134 (fontified t) 134 135 (syntax-table #1# face font-lock-string-face fontified t) 135 137 (face font-lock-string-face fontified t) 137 138 (syntax-table #1# face font-lock-string-face fontified t) 138 140 (fontified t) 140 143 (fontified t) 143 144 (fontified t face font-lock-variable-name-face) 144 147 (fontified t) 147 150 (fontified t face font-lock-builtin-face) 150 159 (fontified t) 159 171 (fontified t) 171 180 (fontified t) 180 186 (fontified t) 186 190 (fontified t) 190 193 (fontified t) 193 194 (fontified t face font-lock-variable-name-face) 194 202 (fontified t) 202 205 (fontified t face font-lock-builtin-face) 205 215 (fontified t) 215 218 (fontified t) 218 219 (fontified t face font-lock-variable-name-face) 219 222 (fontified t) 222 227 (fontified t face font-lock-builtin-face) 227 228 (fontified t) 228 230 (fontified t) 230 237 (fontified t) 237 238 (fontified t) 238 241 (fontified t) 241 246 (fontified t) 246 249 (fontified t) 249 255 (fontified t face font-lock-keyword-face) 255 256 (fontified t) 256 257 (fontified t syntax-table #1# face font-lock-string-face) 257 262 (fontified t face font-lock-string-face) 262 263 (fontified t syntax-table #1# face font-lock-string-face) 263 282 (fontified t) 282 283 (rear-nonsticky t fontified t) 283 284 (fontified t)) . 5774) (undo-tree-id1748 . -274) (undo-tree-id1749 . -28) (undo-tree-id1750 . -274) (undo-tree-id1751 . -30) (undo-tree-id1752 . -30) (undo-tree-id1753 . -52) (undo-tree-id1754 . -52) (undo-tree-id1755 . -284) (undo-tree-id1756 . -284) (undo-tree-id1757 . -246) (undo-tree-id1758 . -246) (undo-tree-id1759 . -215) (undo-tree-id1760 . -215) (undo-tree-id1761 . -190) (undo-tree-id1762 . -190) (undo-tree-id1763 . -140) (undo-tree-id1764 . -140) (undo-tree-id1765 . -71) (undo-tree-id1766 . -71) (undo-tree-id1767 . -274) (undo-tree-id1768 . -28) (undo-tree-id1769 . -274) 6048 (t 23429 25455 0 0)) nil (23429 25462 547249 0) 0 nil]) ((5356 . 5362) (#("convert_bytes(os.lstat(row['URL']).st_size)" 0 14 (fontified t) 14 27 (fontified t) 27 28 (fontified t syntax-table #1# face font-lock-string-face) 28 31 (fontified t face font-lock-string-face) 31 32 (fontified t syntax-table #1# face font-lock-string-face) 32 41 (fontified t) 41 42 (rear-nonsticky t fontified t) 42 43 (fontified t)) . 5356) (undo-tree-id1730 . -43) (undo-tree-id1731 . -43) (undo-tree-id1732 . -43)) nil (23429 25455 814731 0) 0 nil]) ((#("            
" 0 12 (fontified t) 12 13 (fontified t)) . 5325) (undo-tree-id1733 . -13) (undo-tree-id1734 . -13) (undo-tree-id1735 . -11) (undo-tree-id1736 . -1) (undo-tree-id1737 . -4) (undo-tree-id1738 . -5) (undo-tree-id1739 . -8) (undo-tree-id1740 . -9) (undo-tree-id1741 . -13) 5336 (t 23429 25440 0 0)) nil (23429 25455 814742 0) 0 nil] [nil ([nil nil ((5291 . 5294) (#("t" 0 1 (fontified t)) . -5291) (undo-tree-id1720 . -1) 5292 (5290 . 5292) (#("convert_bytes(os.lstat(row['URL']).st_size)" 0 14 (fontified t) 14 27 (fontified t) 27 28 (fontified t syntax-table #1# face font-lock-string-face) 28 31 (fontified t face font-lock-string-face) 31 32 (fontified t syntax-table #1# face font-lock-string-face) 32 41 (fontified t) 41 42 (rear-nonsticky t fontified t) 42 43 (fontified t)) . 5290)) ((5290 . 5333) (#("ot" 0 1 (fontified nil) 1 2 (fontified nil)) . 5290) (undo-tree-id1728 . -2) (5291 . 5292) (#("utp" 0 3 (fontified t)) . 5291) (undo-tree-id1729 . -2)) (23429 25449 130371 0) 0 nil]) ((#("            output = output.stdout.decode('utf-8').split('\\t')[0]
            
" 0 12 (fontified t) 12 18 (fontified t face font-lock-variable-name-face) 18 42 (fontified t) 42 43 (fontified t syntax-table #1# face font-lock-string-face) 43 48 (fontified t face font-lock-string-face) 48 49 (fontified t syntax-table #1# face font-lock-string-face) 49 57 (fontified t) 57 58 (fontified t syntax-table #1# face font-lock-string-face) 58 60 (fontified t face font-lock-string-face) 60 61 (fontified t syntax-table #1# face font-lock-string-face) 61 65 (fontified t) 65 66 (fontified t) 66 78 (fontified t) 78 79 (fontified t)) . 5259) (undo-tree-id1721 . 14) (undo-tree-id1722 . -79) (undo-tree-id1723 . -79) (undo-tree-id1724 . -66) (undo-tree-id1725 . -66) (undo-tree-id1726 . -64) (undo-tree-id1727 . -77) 5336 (t 23429 25440 0 0)) ((5259 . 5338)) (23429 25449 131003 0) 0 nil]) ((5319 . 5324) (#("\\" 0 1 (fontified t face font-lock-string-face)) . -5319) (undo-tree-id1715 . -1) 5320 (5313 . 5320) (#("t" 0 1 (fontified t)) . -5313) (undo-tree-id1716 . -1) 5314 (5313 . 5314) (#("u" 0 1 (fontified t)) . -5313) (undo-tree-id1717 . -1) (#("t" 0 1 (fontified t)) . -5314) (undo-tree-id1718 . -1) 5315 (5310 . 5315) (#("." 0 1 (fontified t)) . -5310) (undo-tree-id1719 . -1) 5311 (5310 . 5311)) nil (23429 25449 558825 0) 0 nil]) ((5307 . 5308)) nil (23429 25440 106604 0) 0 nil]) ((5308 . 5309)) nil (23429 25440 106605 0) 0 nil] [nil ([nil nil ((5358 . 5359)) ((#("." 0 1 (fontified t)) . 5358) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1)) (23429 25425 808516 0) 0 nil]) ((5350 . 5358) (#("." 0 1 (fontified t face font-lock-string-face)) . -5350) 5351 (5337 . 5351) (#("d" 0 1 (fontified t face font-lock-string-face)) . -5337) (#("e" 0 1 (fontified t face font-lock-string-face)) . -5338) 5339 (5337 . 5339) (#("u" 0 1 (fontified t face font-lock-string-face)) . -5337) (#("t" 0 1 (fontified t face font-lock-string-face)) . -5338) 5339 (5334 . 5339) (#("t" 0 1 (fontified t face font-lock-string-face)) . -5334) 5335 (5321 . 5335) (5308 . 5321) 5307) ((#("
            " 0 1 (fontified t face font-lock-string-face) 1 13 (fontified nil face font-lock-string-face)) . 5308) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (undo-tree-id1301 . -13) (undo-tree-id1302 . -1) (undo-tree-id1303 . -2) (undo-tree-id1304 . -5) (undo-tree-id1305 . -6) (undo-tree-id1306 . -9) (undo-tree-id1307 . -10) (undo-tree-id1308 . -1) (undo-tree-id1309 . -2) (undo-tree-id1310 . -5) (undo-tree-id1311 . -6) (undo-tree-id1312 . -9) (undo-tree-id1313 . -10) (undo-tree-id1314 . -1) (undo-tree-id1315 . -2) (undo-tree-id1316 . -5) (undo-tree-id1317 . -6) (undo-tree-id1318 . -9) (undo-tree-id1319 . -10) (undo-tree-id1320 . -1) (undo-tree-id1321 . -2) (undo-tree-id1322 . -5) (undo-tree-id1323 . -6) (undo-tree-id1324 . -9) (undo-tree-id1325 . -10) (undo-tree-id1326 . -1) (undo-tree-id1327 . -2) (undo-tree-id1328 . -5) (undo-tree-id1329 . -6) (undo-tree-id1330 . -9) (undo-tree-id1331 . -10) (undo-tree-id1332 . -1) (undo-tree-id1333 . -2) (undo-tree-id1334 . -5) (undo-tree-id1335 . -6) (undo-tree-id1336 . -9) (undo-tree-id1337 . -10) (undo-tree-id1338 . -1) (undo-tree-id1339 . -2) (undo-tree-id1340 . -5) (undo-tree-id1341 . -6) (undo-tree-id1342 . -9) (undo-tree-id1343 . -10) (undo-tree-id1344 . -1) (undo-tree-id1345 . -2) (undo-tree-id1346 . -5) (undo-tree-id1347 . -6) (undo-tree-id1348 . -9) (undo-tree-id1349 . -10) (undo-tree-id1350 . -1) (undo-tree-id1351 . -2) (undo-tree-id1352 . -5) (undo-tree-id1353 . -6) (undo-tree-id1354 . -9) (undo-tree-id1355 . -10) (undo-tree-id1356 . -1) (undo-tree-id1357 . -2) (undo-tree-id1358 . -5) (undo-tree-id1359 . -6) (undo-tree-id1360 . -9) (undo-tree-id1361 . -10) (undo-tree-id1362 . -1) (undo-tree-id1363 . -2) (undo-tree-id1364 . -5) (undo-tree-id1365 . -6) (undo-tree-id1366 . -9) (undo-tree-id1367 . -10) (undo-tree-id1368 . -1) (undo-tree-id1369 . -2) (undo-tree-id1370 . -5) (undo-tree-id1371 . -6) (undo-tree-id1372 . -9) (undo-tree-id1373 . -10) (undo-tree-id1374 . -1) (undo-tree-id1375 . -2) (undo-tree-id1376 . -5) (undo-tree-id1377 . -6) (undo-tree-id1378 . -9) (undo-tree-id1379 . -10) (undo-tree-id1380 . -1) (undo-tree-id1381 . -2) (undo-tree-id1382 . -5) (undo-tree-id1383 . -6) (undo-tree-id1384 . -9) (undo-tree-id1385 . -10) (undo-tree-id1386 . -1) (undo-tree-id1387 . -2) (undo-tree-id1388 . -5) (undo-tree-id1389 . -6) (undo-tree-id1390 . -9) (undo-tree-id1391 . -10) (undo-tree-id1392 . -1) (undo-tree-id1393 . -2) (undo-tree-id1394 . -5) (undo-tree-id1395 . -6) (undo-tree-id1396 . -9) (undo-tree-id1397 . -10) (undo-tree-id1398 . -1) (undo-tree-id1399 . -2) (undo-tree-id1400 . -5) (undo-tree-id1401 . -6) (undo-tree-id1402 . -9) (undo-tree-id1403 . -10) (undo-tree-id1404 . -1) (undo-tree-id1405 . -2) (undo-tree-id1406 . -5) (undo-tree-id1407 . -6) (undo-tree-id1408 . -9) (undo-tree-id1409 . -10) (undo-tree-id1410 . -1) (undo-tree-id1411 . -2) (undo-tree-id1412 . -5) (undo-tree-id1413 . -6) (undo-tree-id1414 . -9) (undo-tree-id1415 . -10) (undo-tree-id1416 . -1) (undo-tree-id1417 . -2) (undo-tree-id1418 . -5) (undo-tree-id1419 . -6) (undo-tree-id1420 . -9) (undo-tree-id1421 . -10) (undo-tree-id1422 . -1) (undo-tree-id1423 . -2) (undo-tree-id1424 . -5) (undo-tree-id1425 . -6) (undo-tree-id1426 . -9) (undo-tree-id1427 . -10) (undo-tree-id1428 . -1) (undo-tree-id1429 . -2) (undo-tree-id1430 . -5) (undo-tree-id1431 . -6) (undo-tree-id1432 . -9) (undo-tree-id1433 . -10) (undo-tree-id1434 . -1) (undo-tree-id1435 . -2) (undo-tree-id1436 . -5) (undo-tree-id1437 . -6) (undo-tree-id1438 . -9) (undo-tree-id1439 . -10) (undo-tree-id1440 . -1) (undo-tree-id1441 . -2) (undo-tree-id1442 . -5) (undo-tree-id1443 . -6) (undo-tree-id1444 . -9) (undo-tree-id1445 . -10) (undo-tree-id1446 . -1) (undo-tree-id1447 . -2) (undo-tree-id1448 . -5) (undo-tree-id1449 . -6) (undo-tree-id1450 . -9) (undo-tree-id1451 . -10) (undo-tree-id1452 . -1) (undo-tree-id1453 . -2) (undo-tree-id1454 . -5) (undo-tree-id1455 . -6) (undo-tree-id1456 . -9) (undo-tree-id1457 . -10) (undo-tree-id1458 . -1) (undo-tree-id1459 . -2) (undo-tree-id1460 . -5) (undo-tree-id1461 . -6) (undo-tree-id1462 . -9) (undo-tree-id1463 . -10) (undo-tree-id1464 . -1) (undo-tree-id1465 . -2) (undo-tree-id1466 . -5) (undo-tree-id1467 . -6) (undo-tree-id1468 . -9) (undo-tree-id1469 . -10) (undo-tree-id1470 . -1) (undo-tree-id1471 . -2) (undo-tree-id1472 . -5) (undo-tree-id1473 . -6) (undo-tree-id1474 . -9) (undo-tree-id1475 . -10) (undo-tree-id1476 . -1) (undo-tree-id1477 . -2) (undo-tree-id1478 . -5) (undo-tree-id1479 . -6) (undo-tree-id1480 . -9) (undo-tree-id1481 . -10) (undo-tree-id1482 . -1) (undo-tree-id1483 . -2) (undo-tree-id1484 . -5) (undo-tree-id1485 . -6) (undo-tree-id1486 . -9) (undo-tree-id1487 . -10) (undo-tree-id1488 . -1) (undo-tree-id1489 . -2) (undo-tree-id1490 . -5) (undo-tree-id1491 . -6) (undo-tree-id1492 . -9) (undo-tree-id1493 . -10) (undo-tree-id1494 . -1) (undo-tree-id1495 . -2) (undo-tree-id1496 . -5) (undo-tree-id1497 . -6) (undo-tree-id1498 . -9) (undo-tree-id1499 . -10) (undo-tree-id1500 . -1) (undo-tree-id1501 . -2) (undo-tree-id1502 . -5) (undo-tree-id1503 . -6) (undo-tree-id1504 . -9) (undo-tree-id1505 . -10) (undo-tree-id1506 . -1) (undo-tree-id1507 . -2) (undo-tree-id1508 . -5) (undo-tree-id1509 . -6) (undo-tree-id1510 . -9) (undo-tree-id1511 . -10) (undo-tree-id1512 . -1) (undo-tree-id1513 . -2) (undo-tree-id1514 . -5) (undo-tree-id1515 . -6) (undo-tree-id1516 . -9) (undo-tree-id1517 . -10) (undo-tree-id1518 . -1) (undo-tree-id1519 . -2) (undo-tree-id1520 . -5) (undo-tree-id1521 . -6) (undo-tree-id1522 . -9) (undo-tree-id1523 . -10) (undo-tree-id1524 . -1) (undo-tree-id1525 . -2) (undo-tree-id1526 . -5) (undo-tree-id1527 . -6) (undo-tree-id1528 . -9) (undo-tree-id1529 . -10) (undo-tree-id1530 . -1) (undo-tree-id1531 . -2) (undo-tree-id1532 . -5) (undo-tree-id1533 . -6) (undo-tree-id1534 . -9) (undo-tree-id1535 . -10) (undo-tree-id1536 . -1) (undo-tree-id1537 . -2) (undo-tree-id1538 . -5) (undo-tree-id1539 . -6) (undo-tree-id1540 . -9) (undo-tree-id1541 . -10) (undo-tree-id1542 . -1) (undo-tree-id1543 . -2) (undo-tree-id1544 . -5) (undo-tree-id1545 . -6) (undo-tree-id1546 . -9) (undo-tree-id1547 . -10) (undo-tree-id1548 . -1) (undo-tree-id1549 . -2) (undo-tree-id1550 . -5) (undo-tree-id1551 . -6) (undo-tree-id1552 . -9) (undo-tree-id1553 . -10) (undo-tree-id1554 . -1) (undo-tree-id1555 . -2) (undo-tree-id1556 . -5) (undo-tree-id1557 . -6) (undo-tree-id1558 . -9) (undo-tree-id1559 . -10) (undo-tree-id1560 . -1) (undo-tree-id1561 . -2) (undo-tree-id1562 . -5) (undo-tree-id1563 . -6) (undo-tree-id1564 . -9) (undo-tree-id1565 . -10) (undo-tree-id1566 . -1) (undo-tree-id1567 . -2) (undo-tree-id1568 . -5) (undo-tree-id1569 . -6) (undo-tree-id1570 . -9) (undo-tree-id1571 . -10) (undo-tree-id1572 . -1) (undo-tree-id1573 . -2) (undo-tree-id1574 . -5) (undo-tree-id1575 . -6) (undo-tree-id1576 . -9) (undo-tree-id1577 . -10) (undo-tree-id1578 . -1) (undo-tree-id1579 . -2) (undo-tree-id1580 . -5) (undo-tree-id1581 . -6) (undo-tree-id1582 . -9) (undo-tree-id1583 . -10) (undo-tree-id1584 . -1) (undo-tree-id1585 . -2) (undo-tree-id1586 . -5) (undo-tree-id1587 . -6) (undo-tree-id1588 . -9) (undo-tree-id1589 . -10) (undo-tree-id1590 . -1) (undo-tree-id1591 . -2) (undo-tree-id1592 . -5) (undo-tree-id1593 . -6) (undo-tree-id1594 . -9) (undo-tree-id1595 . -10) (undo-tree-id1596 . -1) (undo-tree-id1597 . -2) (undo-tree-id1598 . -5) (undo-tree-id1599 . -6) (undo-tree-id1600 . -9) (undo-tree-id1601 . -10) (undo-tree-id1602 . -1) (undo-tree-id1603 . -2) (undo-tree-id1604 . -5) (undo-tree-id1605 . -6) (undo-tree-id1606 . -9) (undo-tree-id1607 . -10) (undo-tree-id1608 . -13) (undo-tree-id1609 . -13) (undo-tree-id1610 . -13) (undo-tree-id1611 . -1) (undo-tree-id1612 . -2) (undo-tree-id1613 . -5) (undo-tree-id1614 . -6) (undo-tree-id1615 . -9) (undo-tree-id1616 . -10) (undo-tree-id1617 . -1) (undo-tree-id1618 . -13) (undo-tree-id1619 . -13) (undo-tree-id1620 . -1) (undo-tree-id1621 . -2) (undo-tree-id1622 . -5) (undo-tree-id1623 . -6) (undo-tree-id1624 . -9) (undo-tree-id1625 . -10) (undo-tree-id1626 . -1) (undo-tree-id1627 . -2) (undo-tree-id1628 . -5) (undo-tree-id1629 . -6) (undo-tree-id1630 . -9) (undo-tree-id1631 . -10) (undo-tree-id1632 . -1) (undo-tree-id1633 . -2) (undo-tree-id1634 . -5) (undo-tree-id1635 . -6) (undo-tree-id1636 . -9) (undo-tree-id1637 . -10) (undo-tree-id1638 . -1) (undo-tree-id1639 . -2) (undo-tree-id1640 . -5) (undo-tree-id1641 . -6) (undo-tree-id1642 . -9) (undo-tree-id1643 . -10) (undo-tree-id1644 . -1) (undo-tree-id1645 . -2) (undo-tree-id1646 . -5) (undo-tree-id1647 . -6) (undo-tree-id1648 . -9) (undo-tree-id1649 . -10) (undo-tree-id1650 . -1) (undo-tree-id1651 . -2) (undo-tree-id1652 . -5) (undo-tree-id1653 . -6) (undo-tree-id1654 . -9) (undo-tree-id1655 . -10) (undo-tree-id1656 . -1) (undo-tree-id1657 . -2) (undo-tree-id1658 . -5) (undo-tree-id1659 . -6) (undo-tree-id1660 . -9) (undo-tree-id1661 . -10) (undo-tree-id1662 . -1) (undo-tree-id1663 . -2) (undo-tree-id1664 . -5) (undo-tree-id1665 . -6) (undo-tree-id1666 . -9) (undo-tree-id1667 . -10) (undo-tree-id1668 . -1) (undo-tree-id1669 . -2) (undo-tree-id1670 . -5) (undo-tree-id1671 . -6) (undo-tree-id1672 . -9) (undo-tree-id1673 . -10) (undo-tree-id1674 . -1) (undo-tree-id1675 . -2) (undo-tree-id1676 . -5) (undo-tree-id1677 . -6) (undo-tree-id1678 . -9) (undo-tree-id1679 . -10) (undo-tree-id1680 . -1) (undo-tree-id1681 . -2) (undo-tree-id1682 . -5) (undo-tree-id1683 . -6) (undo-tree-id1684 . -9) (undo-tree-id1685 . -10) (#("output = outpt" 0 13 (fontified nil face font-lock-string-face) 13 14 (fontified nil face font-lock-string-face)) . 5321) (undo-tree-id1686 . -13) (undo-tree-id1687 . -13) (undo-tree-id1688 . -13) (undo-tree-id1689 . -13) (undo-tree-id1690 . -13) (undo-tree-id1691 . 1) (undo-tree-id1692 . -13) (5334 . 5335) (#("ut.ut" 0 3 (fontified nil face font-lock-string-face) 3 4 (fontified nil face font-lock-string-face) 4 5 (fontified nil face font-lock-string-face)) . 5334) (undo-tree-id1693 . -3) (undo-tree-id1694 . -3) (undo-tree-id1695 . -3) (undo-tree-id1696 . -3) (undo-tree-id1697 . -3) (undo-tree-id1698 . 2) (undo-tree-id1699 . -3) (5337 . 5339) (#("de" 0 1 (fontified nil face font-lock-string-face) 1 2 (fontified nil face font-lock-string-face)) . 5337) (undo-tree-id1700 . 2) (5337 . 5339) (#("stdout.decode." 0 13 (fontified nil face font-lock-string-face) 13 14 (fontified nil face font-lock-string-face)) . 5337) (undo-tree-id1701 . -13) (undo-tree-id1702 . -13) (undo-tree-id1703 . -13) (undo-tree-id1704 . -13) (undo-tree-id1705 . -13) (undo-tree-id1706 . 1) (undo-tree-id1707 . -13) (5350 . 5351) (#("('utf-8)" 0 1 (fontified t face font-lock-string-face) 1 2 (fontified t syntax-table #1# face font-lock-string-face) 2 8 (fontified t)) . 5350) (undo-tree-id1708 . -7) (undo-tree-id1709 . -8) (undo-tree-id1710 . -8) (undo-tree-id1711 . -8) (undo-tree-id1712 . -8) (undo-tree-id1713 . 1) (undo-tree-id1714 . -8)) (23429 25425 809073 0) 0 nil]) ((5300 . 5308) (#("." 0 1 (fontified t)) . -5300) (undo-tree-id1291 . -1) 5301 (5288 . 5301) (5287 . 5288) (#("d" 0 1 (fontified t)) . -5287) (undo-tree-id1292 . -1) (#("e" 0 1 (fontified t)) . -5288) (undo-tree-id1293 . -1) 5289 (5287 . 5289) (#("u" 0 1 (fontified t)) . -5287) (undo-tree-id1294 . -1) (#("t" 0 1 (fontified t)) . -5288) (undo-tree-id1295 . -1) 5289 (5284 . 5289) (#("t" 0 1 (fontified t)) . -5284) (undo-tree-id1296 . -1) 5285 (5271 . 5285) (5258 . 5271) 5257) nil (23429 25426 422090 0) 0 nil] [nil ([nil nil ((5279 . 5280)) ((#("'" 0 1 (fontified t syntax-table #1# face font-lock-string-face)) . 5279)) (23429 25409 46002 0) 0 nil]) ((5259 . 5280) (#("d" 0 1 (fontified t)) . -5259) (undo-tree-id1219 . -1) (#("e" 0 1 (fontified t)) . -5260) (undo-tree-id1220 . -1) (#("c" 0 1 (fontified t)) . -5261) (undo-tree-id1221 . -1) (#("o" 0 1 (fontified t)) . -5262) (undo-tree-id1222 . -1) (#("d" 0 1 (fontified t)) . -5263) (undo-tree-id1223 . -1) (#("e" 0 1 (fontified t)) . -5264) (undo-tree-id1224 . -1) 5265 (5258 . 5265)) ((#(".decode" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil) 5 6 (fontified nil) 6 7 (fontified nil)) . 5258) (undo-tree-id1282 . -7) (undo-tree-id1283 . 6) (undo-tree-id1284 . -1) (undo-tree-id1285 . -1) (5259 . 5265) (#("stdout.decode('utf-8)" 0 14 (fontified t) 14 15 (fontified t syntax-table #1# face font-lock-string-face) 15 20 (fontified t face font-lock-string-face) 20 21 (fontified t face font-lock-string-face)) . 5259) (undo-tree-id1286 . 1) (undo-tree-id1287 . -20) (undo-tree-id1288 . 1) (undo-tree-id1289 . -21) (undo-tree-id1290 . -21)) (23429 25409 47159 0) 0 nil]) ((#("k" 0 1 (fontified t)) . -5271) (undo-tree-id1225 . -1) 5272 (5271 . 5272) (5258 . 5271) 5197) nil (23429 25409 751545 0) 0 nil]) ((5270 . 5271)) nil (23429 25409 46023 0) 0 nil]) ((5171 . 5175)) nil (23429 25409 46024 0) 0 nil]) ((#("    " 0 4 (fontified t)) . -5171) (undo-tree-id1226 . -4) 5175) nil (23429 25409 46026 0) 0 nil]) ((5241 . 5258) (#("-" 0 1 (fontified t)) . -5241) (undo-tree-id1227 . -1) 5242 (5238 . 5242) (5221 . 5238)) nil (23429 25409 46030 0) 0 nil]) ((5219 . 5221)) nil (23429 25409 46031 0) 0 nil]) ((5200 . 5201) (#("'" 0 1 (fontified t syntax-table #1# face font-lock-string-face)) . 5200)) nil (23429 25409 46032 0) 0 nil]) ((#("h" 0 1 (fontified t face font-lock-string-face)) . -5219) (undo-tree-id1228 . -1) 5220 (5209 . 5220) (5199 . 5209) (#("'" 0 1 (fontified t syntax-table #1# face font-lock-string-face)) . -5199) (undo-tree-id1229 . -1) (#("d" 0 1 (fontified t face font-lock-string-face)) . -5200) (undo-tree-id1230 . -1) (#("u" 0 1 (fontified t face font-lock-string-face)) . -5201) (undo-tree-id1231 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -5202) (undo-tree-id1232 . -1) (#("-" 0 1 (fontified t face font-lock-string-face)) . -5203) (undo-tree-id1233 . -1) (#("s" 0 1 (fontified t face font-lock-string-face)) . -5204) (undo-tree-id1234 . -1) (#("h" 0 1 (fontified t face font-lock-string-face)) . -5205) (undo-tree-id1235 . -1) 5206 (5204 . 5206) (#(" " 0 1 (fontified t face font-lock-string-face)) . -5204) (undo-tree-id1236 . -1) 5205 (5200 . 5205) (#("u" 0 1 (fontified t face font-lock-string-face)) . -5200) (undo-tree-id1237 . -1) 5201 (5195 . 5201) (#("r" 0 1 (fontified t)) . -5195) (undo-tree-id1238 . -1) (#("u" 0 1 (fontified t)) . -5196) (undo-tree-id1239 . -1) (#("n" 0 1 (fontified t)) . -5197) (undo-tree-id1240 . -1) 5198 (5196 . 5198) (5175 . 5196) (#("s" 0 1 (fontified t)) . -5175) (undo-tree-id1241 . -1) (#("u" 0 1 (fontified t)) . -5176) (undo-tree-id1242 . -1) (#("b" 0 1 (fontified t)) . -5177) (undo-tree-id1243 . -1) (#("p" 0 1 (fontified t)) . -5178) (undo-tree-id1244 . -1) (#("r" 0 1 (fontified t)) . -5179) (undo-tree-id1245 . -1) (#("o" 0 1 (fontified t)) . -5180) (undo-tree-id1246 . -1) (#("c" 0 1 (fontified t)) . -5181) (undo-tree-id1247 . -1) (#("e" 0 1 (fontified t)) . -5182) (undo-tree-id1248 . -1) (#("s" 0 1 (fontified t)) . -5183) (undo-tree-id1249 . -1) (#("s" 0 1 (fontified t)) . -5184) (undo-tree-id1250 . -1) 5185 (5175 . 5185) (#("subpr" 0 5 (fontified t)) . -5175) (undo-tree-id1251 . -5) 5180 (5176 . 5180) (#("b" 0 1 (fontified t)) . -5176) (undo-tree-id1252 . -1) 5177 (5175 . 5177) (5162 . 5175) 5154) nil (23429 25409 46064 0) 0 nil]) ((#("j" 0 1 (fontified t)) . -120) (undo-tree-id1253 . -1) (#("j" 0 1 (fontified t)) . -121) (undo-tree-id1254 . -1) (#("j" 0 1 (fontified t)) . -122) (undo-tree-id1255 . -1) (#("j" 0 1 (fontified t)) . -123) (undo-tree-id1256 . -1) (#("j" 0 1 (fontified t)) . -124) (undo-tree-id1257 . -1) (#("j" 0 1 (fontified t)) . -125) (undo-tree-id1258 . -1) (#("j" 0 1 (fontified t)) . -126) (undo-tree-id1259 . -1) (#("j" 0 1 (fontified t)) . -127) (undo-tree-id1260 . -1) (#("j" 0 1 (fontified t)) . -128) (undo-tree-id1261 . -1) (#("j" 0 1 (fontified t)) . -129) (undo-tree-id1262 . -1) (#("j" 0 1 (fontified t)) . -130) (undo-tree-id1263 . -1) 131 (120 . 131) (110 . 120) (#("subpr" 0 5 (fontified t)) . -110) (undo-tree-id1264 . -5) 115 (110 . 115) (#("c" 0 1 (fontified t)) . -110) (undo-tree-id1265 . -1) (#("s" 0 1 (fontified t)) . -111) (undo-tree-id1266 . -1) 112 (111 . 112) (#("s" 0 1 (fontified t)) . -111) (undo-tree-id1267 . -1) 112 (103 . 112) (#("u" 0 1 (fontified t)) . -103) (undo-tree-id1268 . -1) (#("m" 0 1 (fontified t)) . -104) (undo-tree-id1269 . -1) (#("p" 0 1 (fontified t)) . -105) (undo-tree-id1270 . -1) 106 (103 . 106) (102 . 103) 88) nil (23429 25409 46090 0) 0 nil]) ((#("    print(convert_bytes(1436863050547200))
" 0 4 (fontified t) 4 9 (fontified t face font-lock-keyword-face) 9 10 (fontified t) 10 24 (fontified t) 24 39 (fontified t) 39 40 (fontified t rear-nonsticky t) 40 42 (fontified t) 42 43 (fontified t)) . 8670) (undo-tree-id1271 . -24) (undo-tree-id1272 . -24) (undo-tree-id1273 . -39) (undo-tree-id1274 . 1) (undo-tree-id1275 . -4) (undo-tree-id1276 . -41) (undo-tree-id1277 . -41) (undo-tree-id1278 . 2) (undo-tree-id1279 . -42) (undo-tree-id1280 . 34) (undo-tree-id1281 . -10) 8711 (t 23429 24134 0 0)) nil (23429 25409 46104 0) 0 nil]) ((8711 . 8712)) nil (23429 24134 194935 0) 0 nil]) ((8679 . 8680) (8674 . 8679) (t 23429 24122 0 0)) nil (23429 24134 194939 0) 0 nil]) ((8704 . 8705)) nil (23429 24122 55839 0) 0 nil]) ((nil rear-nonsticky nil 8703 . 8704) (nil fontified nil 8688 . 8704) (8688 . 8704) 8687) nil (23429 24122 55843 0) 0 nil]) ((#("p" 0 1 (fontified t)) . -8688) (undo-tree-id1217 . -1) 8689 (8688 . 8689) (8687 . 8688) (8674 . 8687) (#("convert" 0 7 (fontified t)) . -8674) (undo-tree-id1218 . -7) 8681 (8674 . 8681) (8669 . 8674) (t 23429 23353 0 0) 8663) nil (23429 24122 55852 0) 0 nil] [nil nil ((nil rear-nonsticky nil 8698 . 8699) (nil fontified nil 8664 . 8699) (8664 . 8699) 8663 (t 23429 23353 0 0)) ((#("statvfs.f_frsize * statvfs.f_blocks" 0 34 (fontified nil) 34 35 (fontified nil rear-nonsticky nil)) . 8664) (undo-tree-id1215 . -34) (undo-tree-id1216 . -34) (nil rear-nonsticky t 8698 . 8699)) (23429 24106 174499 0) 0 nil]) ((5494 . 5498)) nil (23429 24106 175093 0) 0 nil]) ((#("m" 0 1 (fontified t)) . 5491)) nil (23429 23353 409362 0) 0 nil]) ((#("o" 0 1 (fontified t)) . 5491)) nil (23429 23353 409364 0) 0 nil]) ((#("r" 0 1 (fontified t)) . 5491)) nil (23429 23353 409365 0) 0 nil]) ((#("f" 0 1 (fontified t)) . 5491) (t 23429 23188 0 0)) nil (23429 23353 409367 0) 0 nil]) ((#(" " 0 1 (fontified t face font-lock-string-face)) . -5556) (undo-tree-id1214 . -1) 5557 (5556 . 5557)) nil (23429 23188 617217 0) 0 nil]) ((#("\"" 0 1 (fontified t syntax-table #1# face font-lock-string-face)) . 5548)) nil (23429 23188 617220 0) 0 nil]) ((#("\"" 0 1 (fontified t rear-nonsticky t syntax-table #1# face font-lock-string-face)) . 5557)) nil (23429 23188 617222 0) 0 nil]) ((nil rear-nonsticky nil 5557 . 5558) (nil fontified nil 5548 . 5558) (nil fontified t 5548 . 5558) (nil face font-lock-string-face 5548 . 5558) (5548 . 5558) 5547) nil (23429 23188 617224 0) 0 nil] [nil nil ((#("           " 0 11 (fontified t)) . -5551) (undo-tree-id1187 . -11) (undo-tree-id1188 . -1) (undo-tree-id1189 . -4) (undo-tree-id1190 . -5) (undo-tree-id1191 . -8) (undo-tree-id1192 . -9) (undo-tree-id1193 . -11) 5562 (5550 . 5562) 5547) ((#("
           " 0 1 (fontified t) 1 12 (fontified nil)) . 5550) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) (undo-tree-id1205 . -12) (undo-tree-id1206 . -1) (undo-tree-id1207 . -12) (undo-tree-id1208 . -1) (undo-tree-id1209 . -2) (undo-tree-id1210 . -5) (undo-tree-id1211 . -6) (undo-tree-id1212 . -9) (undo-tree-id1213 . -10) (5551 . 5562)) (23429 23127 229299 0) 0 nil]) ((5547 . 5549)) nil (23429 23127 229565 0) 0 nil]) ((5541 . 5548) (#("p" 0 1 (fontified t)) . -5541) (undo-tree-id1194 . -1) (#("t" 0 1 (fontified t)) . -5542) (undo-tree-id1195 . -1) (#("i" 0 1 (fontified t)) . -5543) (undo-tree-id1196 . -1) (#("m" 0 1 (fontified t)) . -5544) (undo-tree-id1197 . -1) (#("e" 0 1 (fontified t)) . -5545) (undo-tree-id1198 . -1) 5546 (5538 . 5546) (#("strp" 0 4 (fontified t)) . -5538) (undo-tree-id1199 . -4) 5542 (5537 . 5542)) nil (23429 23127 229312 0) 0 nil]) ((5536 . 5537)) nil (23429 23127 229314 0) 0 nil]) ((#(")" 0 1 (fontified t)) . 5508) (undo-tree-id1200 . 1) (undo-tree-id1201 . -1)) nil (23429 23127 229317 0) 0 nil]) ((5508 . 5509)) nil (23429 23127 229318 0) 0 nil]) ((#("$" 0 1 (fontified t)) . -5508) (undo-tree-id1202 . -1) 5509 (5495 . 5509) (5482 . 5495)) nil (23429 23127 229320 0) 0 nil]) ((7914 . 7931) (#("            sizes" 0 12 (fontified t) 12 17 (fontified t)) . 7914) (t 23429 22821 0 0)) nil (23429 23127 229322 0) 0 nil]) ((7931 . 7937) (#(" " 0 1 (fontified t)) . -7931) (undo-tree-id1185 . -1) 7932 (7927 . 7932) (7847 . 7926) (#("        " 0 8 (fontified nil)) . 7847) (undo-tree-id1186 . -8) (7855 . 7856) (7846 . 7855)) nil (23429 22821 331840 0) 0 nil] [nil nil ((#("        " 0 8 (fontified t)) . -7848) (undo-tree-id1153 . -8) (undo-tree-id1154 . -1) (undo-tree-id1155 . -4) (undo-tree-id1156 . -5) (undo-tree-id1157 . -8) 7856 (7847 . 7856) 7846) ((#("
        " 0 1 (fontified t) 1 9 (fontified nil)) . 7847) (undo-tree-id1176 . -9) (undo-tree-id1177 . -1) (undo-tree-id1178 . -1) (undo-tree-id1179 . -1) (undo-tree-id1180 . -9) (undo-tree-id1181 . -1) (undo-tree-id1182 . -2) (undo-tree-id1183 . -5) (undo-tree-id1184 . -6) (7848 . 7856)) (23429 22808 219317 0) 0 nil]) ((7627 . 7706) (#(" " 0 1 (fontified nil)) . 7626) (undo-tree-id1158 . -1) (7627 . 7628)) nil (23429 22808 225695 0) 0 nil]) ((7522 . 7601) (#(" " 0 1 (fontified nil)) . 7522) (7521 . 7522)) nil (23429 22808 219325 0) 0 nil]) ((#(" " 0 1 (fontified t)) . -7688) (undo-tree-id1159 . -1) 7689 (7687 . 7689) (#(" " 0 1 (fontified t)) . -7687) (undo-tree-id1160 . -1) 7688 (7687 . 7688)) nil (23429 22808 219329 0) 0 nil]) ((7569 . 7570)) nil (23429 22808 219331 0) 0 nil]) ((#("l" 0 1 (fontified t)) . -7686) (undo-tree-id1161 . -1) (#("j" 0 1 (fontified t)) . -7687) (undo-tree-id1162 . -1) 7688 (7686 . 7688) (#("," 0 1 (fontified t)) . -7686) (undo-tree-id1163 . -1) (#(" " 0 1 (fontified t)) . -7687) (undo-tree-id1164 . -1) 7688 (7686 . 7688) (7668 . 7686) (#("last" 0 4 (fontified t)) . -7668) (undo-tree-id1165 . -4) 7672 (7668 . 7672) (#(" " 0 1 (fontified t)) . -7668) (undo-tree-id1166 . -1) 7669 (7667 . 7669) (#(" " 0 1 (fontified t)) . -7667) (undo-tree-id1167 . -1) 7668 (7667 . 7668) (7649 . 7667) (#("last" 0 4 (fontified t)) . -7649) (undo-tree-id1168 . -4) 7653 (7650 . 7653) (7570 . 7649) (#("        " 0 8 (fontified nil)) . 7570) (undo-tree-id1169 . -8) (7578 . 7579) (7569 . 7578)) nil (23429 22808 219345 0) 0 nil]) ((5265 . 5267) (#("e" 0 1 (fontified t)) . -5265) (undo-tree-id1170 . -1) 5266 (5261 . 5266) (#("-" 0 1 (fontified t)) . -5261) (undo-tree-id1171 . -1) (#(" " 0 1 (fontified t)) . -5262) (undo-tree-id1172 . -1) 5263 (5260 . 5263)) nil (23429 22808 219352 0) 0 nil]) ((#(" " 0 1 (fontified t)) . 5244) (undo-tree-id1173 . -1) (undo-tree-id1174 . -1) (undo-tree-id1175 . -1)) nil (23429 22808 219356 0) 0 nil]) ((nil rear-nonsticky nil 5260 . 5261) (nil fontified nil 5245 . 5261) (5245 . 5261) 5244) nil (23429 22808 219357 0) 0 nil] [nil nil ((nil rear-nonsticky nil 5157 . 5158) (nil fontified nil 5157 . 5158) (5157 . 5158) 5156) ((#(" " 0 1 (fontified nil rear-nonsticky nil)) . 5157) (nil rear-nonsticky t 5157 . 5158)) (23429 22743 519628 0) 0 nil]) ((5232 . 5245) (#("   " 0 3 (fontified nil)) . -5227) (5230 . 5235) (5218 . 5230) 5179) nil (23429 22743 519898 0) 0 nil]) ((5507 . 5511)) nil (23429 22743 519635 0) 0 nil]) ((#(" " 0 1 (fontified t)) . 5487) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (undo-tree-id1138 . -1)) nil (23429 22743 519642 0) 0 nil]) ((5505 . 5508)) nil (23429 22743 519644 0) 0 nil]) ((nil rear-nonsticky nil 5504 . 5505) (nil fontified nil 5488 . 5505) (5488 . 5505) 5487) nil (23429 22743 519646 0) 0 nil]) ((5475 . 5488) (5470 . 5475) (#("   " 0 3 (fontified t)) . -5470) (undo-tree-id1139 . -3) 5473 (5461 . 5473) 5449) nil (23429 22743 519649 0) 0 nil]) ((5970 . 5976) (5953 . 5970) (#("get_las" 0 7 (fontified t)) . -5953) (undo-tree-id1140 . -7) 5960 (5953 . 5960) (#("f" 0 1 (fontified t)) . -5953) (undo-tree-id1141 . -1) (#("e" 0 1 (fontified t)) . -5954) (undo-tree-id1142 . -1) (#("t" 0 1 (fontified t)) . -5955) (undo-tree-id1143 . -1) 5956 (5945 . 5956) (#(")" 0 1 (fontified t)) . -5945) (undo-tree-id1144 . -1) (undo-tree-id1145 . 1) (undo-tree-id1146 . -1) 5946 (5932 . 5946) (5927 . 5932) 5926) nil (23429 22743 519660 0) 0 nil]) ((5925 . 5927) (5921 . 5925) (5907 . 5921) (#("get_dis" 0 7 (fontified t)) . -5907) (undo-tree-id1147 . -7) 5914 (5907 . 5914) (#("G" 0 1 (fontified t)) . -5907) (undo-tree-id1148 . -1) 5908 (5907 . 5908) (#("g" 0 1 (fontified t)) . -5907) (undo-tree-id1149 . -1) (#("e" 0 1 (fontified t)) . -5908) (undo-tree-id1150 . -1) (#("t" 0 1 (fontified t)) . -5909) (undo-tree-id1151 . -1) 5910 (5899 . 5910) (5895 . 5899)) nil (23429 22743 519670 0) 0 nil]) ((#("    " 0 4 (fontified t)) . -5896) (undo-tree-id1152 . -4) 5900 (5895 . 5900) (t 23429 22615 0 0) 5895) nil (23429 22743 519673 0) 0 nil]) ((#("convert_bytes(" 0 14 (fontified t)) . 5433)) nil (23429 22615 646450 0) 0 nil]) ((#(")" 0 1 (fontified t)) . 5475) (undo-tree-id1120 . 1) (undo-tree-id1121 . -1)) nil (23429 22615 646459 0) 0 nil]) ((#("e" 0 1 (rear-nonsticky t fontified t)) . 5475)) nil (23429 22615 646460 0) 0 nil]) ((#("z" 0 1 (fontified t)) . 5475)) nil (23429 22615 646462 0) 0 nil]) ((#("i" 0 1 (fontified t)) . 5475)) nil (23429 22615 646462 0) 0 nil]) ((#("s" 0 1 (fontified t)) . 5475)) nil (23429 22615 646464 0) 0 nil]) ((#("_" 0 1 (fontified t)) . 5475)) nil (23429 22615 646464 0) 0 nil]) ((#("t" 0 1 (fontified t)) . 5475)) nil (23429 22615 646465 0) 0 nil]) ((#("s" 0 1 (fontified t)) . 5475)) nil (23429 22615 646466 0) 0 nil]) ((#("." 0 1 (fontified t)) . 5475)) nil (23429 22615 646467 0) 0 nil]) ((5450 . 5463) (#("lstat" 0 5 (fontified t)) . 5450)) nil (23429 22615 646469 0) 0 nil]) ((5488 . 5491) (#("du" 0 2 (fontified t)) . 5488) (undo-tree-id1122 . -2) (undo-tree-id1123 . -2)) nil (23429 22615 646472 0) 0 nil]) ((5413 . 5416) (#("du" 0 2 (fontified t)) . 5413)) nil (23429 22615 646473 0) 0 nil]) ((#("
" 0 1 (fontified nil)) . -5489) (5274 . 5490) 5266) nil (23429 22615 646475 0) 0 nil]) ((#("k" 0 1 (fontified t)) . -5279) (undo-tree-id1124 . -1) 5280 (5279 . 5280) (5274 . 5279) (5266 . 5274) (5262 . 5266) (#("    " 0 4 (fontified nil)) . 5261) (undo-tree-id1125 . -4) (5265 . 5266) (5260 . 5265) (5249 . 5260) (#("d" 0 1 (fontified t face font-lock-function-name-face)) . -5249) (undo-tree-id1126 . -1) (#("i" 0 1 (fontified t face font-lock-function-name-face)) . -5250) (undo-tree-id1127 . -1) (#("f" 0 1 (fontified t face font-lock-function-name-face)) . -5251) (undo-tree-id1128 . -1) (#("i" 0 1 (fontified t face font-lock-function-name-face)) . -5252) (undo-tree-id1129 . -1) (#("e" 0 1 (fontified t face font-lock-function-name-face)) . -5253) (undo-tree-id1130 . -1) (#("d" 0 1 (fontified t face font-lock-function-name-face)) . -5254) (undo-tree-id1131 . -1) 5255 (5234 . 5255) (5233 . 5234) 5233) nil (23429 22615 646487 0) 0 nil]) ((#("
" 0 1 (fontified t)) . 5219) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1)) nil (23429 22615 646491 0) 0 nil]) ((5217 . 5218)) nil (23429 22615 646493 0) 0 nil]) ((#("i" 0 1 (fontified t)) . 5188)) nil (23429 22615 646494 0) 0 nil]) ((5188 . 5190) (5175 . 5188) (#("convert" 0 7 (fontified t)) . -5175) (undo-tree-id1134 . -7) 5182 (5175 . 5182)) nil (23429 22615 646496 0) 0 nil]) ((5449 . 5458) (#("byte" 0 4 (fontified t)) . -5449) (undo-tree-id1135 . -4) 5453 (5449 . 5453)) nil (23429 22615 646499 0) 0 nil]) ((#("size_bytes" 0 9 (fontified t) 9 10 (fontified t)) . 5449)) nil (23429 22615 646500 0) 0 nil] [nil nil ((#("size_bytes " 0 9 (fontified t) 9 11 (fontified t)) . 5449)) ((5449 . 5460)) (23429 21971 791344 0) 0 nil] [nil nil ((#("s / p" 0 5 (fontified t)) . 5458)) ((5458 . 5463)) (23429 21963 342461 0) 0 nil]) ((5392 . 5401) (#("byte_s" 0 6 (fontified t)) . -5392) (undo-tree-id1112 . -6) 5398 (5392 . 5398) (#("i" 0 1 (fontified t)) . -5392) (undo-tree-id1113 . -1) (#("b" 0 1 (fontified t)) . -5393) (undo-tree-id1114 . -1) (#("y" 0 1 (fontified t)) . -5394) (undo-tree-id1115 . -1) (#("t" 0 1 (fontified t)) . -5395) (undo-tree-id1116 . -1) (#("e" 0 1 (fontified t)) . -5396) (undo-tree-id1117 . -1) (#("_" 0 1 (fontified t)) . -5397) (undo-tree-id1118 . -1) 5398 (5392 . 5398) (#("bytes" 0 5 (fontified t face font-lock-builtin-face)) . 5392) (undo-tree-id1119 . 5)) nil (23429 21971 791474 0) 0 nil]) ((#("size_" 0 5 (fontified t)) . 5392)) nil (23429 21963 342483 0) 0 nil]) ((5257 . 5266)) nil (23429 21963 342484 0) 0 nil]) ((#("_bytes" 0 6 (fontified t)) . 5257)) nil (23429 21963 342486 0) 0 nil]) ((#("size" 0 4 (fontified t)) . 5257)) nil (23429 21963 342487 0) 0 nil]) ((5241 . 5248) (5239 . 5241) (#("size_bytes" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 10 (fontified t)) . 5239)) nil (23429 21963 342488 0) 0 nil] [nil ([nil ([nil ([nil ([nil nil ((#("_" 0 1 (fontified t)) . 5239)) ((5239 . 5240)) (23429 21923 438054 0) 0 nil]) ((#("e" 0 1 (fontified t)) . 5239)) ((5239 . 5240)) (23429 21923 438189 0) 0 nil]) ((#("z" 0 1 (fontified t)) . 5239)) ((5239 . 5240)) (23429 21924 270663 0) 0 nil]) ((#("i" 0 1 (fontified t)) . 5239)) ((5239 . 5240)) (23429 21924 518168 0) 0 nil]) ((#("s" 0 1 (fontified t)) . 5239)) ((5239 . 5240)) (23429 21924 833206 0) 0 nil]) ((#("_" 0 1 (fontified t face font-lock-function-name-face)) . -5238) (undo-tree-id1103 . -1) (#("t" 0 1 (fontified t face font-lock-function-name-face)) . -5239) (undo-tree-id1104 . -1) (#("o" 0 1 (fontified t face font-lock-function-name-face)) . -5240) (undo-tree-id1105 . -1) 5241 (5233 . 5241) (#("size" 0 4 (fontified t face font-lock-function-name-face)) . 5233)) nil (23429 21925 204503 0) 0 nil]) ((#("mport math
" 0 11 (fontified t)) . 5220) (undo-tree-id1106 . -11) (undo-tree-id1107 . -11) (undo-tree-id1108 . -9) 5229) nil (23429 21923 438076 0) 0 nil]) ((nil rear-nonsticky nil 5517 . 5518) (nil fontified nil 5220 . 5518) (5220 . 5518) (5219 . 5220) (5218 . 5219) 5205) nil (23429 21923 438078 0) 0 nil]) ((312 . 323) (311 . 312) 263) nil (23429 21923 438080 0) 0 nil]) ((#("    
" 0 1 (fontified t) 1 4 (fontified t) 4 5 (fontified t)) . 5006) (undo-tree-id1109 . -5) (undo-tree-id1110 . -5) (undo-tree-id1111 . -3)) nil (23429 21923 438084 0) 0 nil]) ((5211 . 5212) 5210) nil (23429 21923 438085 0) 0 nil] [nil nil ((5212 . 5213) (5211 . 5212) 5210) ((#("
" 0 1 (fontified t)) . 5211) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (#("`" 0 1 (fontified t)) . 5212) (undo-tree-id1102 . -1)) (23429 21748 891646 0) 0 nil]) ((5209 . 5211) (#("compliancdu" 0 11 (fontified t)) . 5209)) nil (23429 21748 891864 0) 0 nil]) ((5218 . 5220) (#("e
" 0 1 (fontified t) 1 2 (fontified t)) . 5218) (undo-tree-id1066 . -2) (undo-tree-id1067 . -2)) nil (23429 21748 891657 0) 0 nil]) ((#("]" 0 1 (fontified t)) . 5165) (undo-tree-id1068 . 1) (undo-tree-id1069 . -1)) nil (23429 21748 891660 0) 0 nil]) ((#("f" 0 1 (fontified t)) . 5165)) nil (23429 21748 891661 0) 0 nil]) ((#("[" 0 1 (fontified t)) . 5165) (undo-tree-id1070 . 1) (undo-tree-id1071 . -1)) nil (23429 21748 891664 0) 0 nil]) ((5149 . 5151) (#(" compliance" 0 1 (fontified t) 1 11 (fontified t)) . 5149)) nil (23429 21748 891666 0) 0 nil]) ((#("            size = os.lstat(row['URL']).st_size
" 0 12 (fontified t) 12 16 (fontified t face font-lock-variable-name-face) 16 32 (fontified t) 32 33 (fontified t syntax-table #1# face font-lock-string-face) 33 36 (fontified t face font-lock-string-face) 36 37 (fontified t syntax-table #1# face font-lock-string-face) 37 47 (fontified t) 47 48 (fontified t)) . 5138) (undo-tree-id1072 . -19) (undo-tree-id1073 . 1) (undo-tree-id1074 . -19) (undo-tree-id1075 . -46) (undo-tree-id1076 . -48) (undo-tree-id1077 . -48) (undo-tree-id1078 . -37) (undo-tree-id1079 . -46) (undo-tree-id1080 . 11) (undo-tree-id1081 . -38) (undo-tree-id1082 . 17) (undo-tree-id1083 . -32) 5175) nil (23429 21748 891676 0) 0 nil]) ((5227 . 5228)) nil (23429 21748 891678 0) 0 nil]) ((#(" os.path.isfile(loc)" 0 9 (fontified t) 9 20 (fontified t)) . 5255)) nil (23429 21748 891679 0) 0 nil]) ((nil rear-nonsticky nil 5254 . 5255) (nil fontified nil 5227 . 5255) (5227 . 5255) 5226) nil (23429 21748 891681 0) 0 nil]) ((#("                " 0 16 (fontified nil)) . -5198) (undo-tree-id1084 . -12) (undo-tree-id1085 . -12) (undo-tree-id1086 . -12) (5186 . 5198) (#("                " 0 16 (fontified nil)) . -5150) (5138 . 5150) (#("            " 0 12 (fontified nil)) . -5107) (undo-tree-id1087 . -12) (undo-tree-id1088 . -12) (5099 . 5107) 5260) nil (23429 21748 891687 0) 0 nil]) ((#("        for f in files:
" 0 8 (fontified t) 8 11 (fontified t face font-lock-keyword-face) 11 12 (fontified t) 12 13 (fontified t) 13 14 (fontified t) 14 16 (fontified t face font-lock-keyword-face) 16 17 (fontified t) 17 23 (fontified t) 23 24 (fontified t)) . 5099) (undo-tree-id1089 . -24) (undo-tree-id1090 . -24) (undo-tree-id1091 . -22) 5121) nil (23429 21748 891691 0) 0 nil]) ((5218 . 5284) (#("                compliance[row['Issue']][f] = os.path.isfile(loc)
" 0 16 (fontified t) 16 26 (fontified t) 26 27 (fontified t) 27 31 (fontified t) 31 32 (fontified t syntax-table #1# face font-lock-string-face) 32 37 (fontified t face font-lock-string-face) 37 38 (fontified t syntax-table #1# face font-lock-string-face) 38 43 (fontified t) 43 54 (fontified t) 54 65 (fontified t) 65 66 (fontified t)) . 5219) (undo-tree-id1092 . 50) (undo-tree-id1093 . -66) (undo-tree-id1094 . -66) (undo-tree-id1095 . -54) 5273) nil (23429 21748 891695 0) 0 nil]) ((#("            " 0 11 (fontified nil) 11 12 (fontified nil)) . -5235) (undo-tree-id1096 . 12) (5219 . 5235) 5269) nil (23429 21748 891698 0) 0 nil] [nil nil ((5234 . 5235) (5217 . 5234) 5216) ((#("
                " 0 1 (fontified t) 1 17 (fontified nil)) . 5217) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) (undo-tree-id1038 . -17) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (undo-tree-id1041 . -2) (undo-tree-id1042 . -5) (undo-tree-id1043 . -6) (undo-tree-id1044 . -9) (undo-tree-id1045 . -10) (undo-tree-id1046 . -13) (undo-tree-id1047 . -14) (undo-tree-id1048 . -17) (undo-tree-id1049 . -17) (undo-tree-id1050 . -1) (undo-tree-id1051 . -2) (undo-tree-id1052 . -5) (undo-tree-id1053 . -6) (undo-tree-id1054 . -9) (undo-tree-id1055 . -10) (undo-tree-id1056 . -13) (undo-tree-id1057 . -14) (undo-tree-id1058 . -1) (undo-tree-id1059 . -2) (undo-tree-id1060 . -5) (undo-tree-id1061 . -6) (undo-tree-id1062 . -9) (undo-tree-id1063 . -10) (undo-tree-id1064 . -13) (undo-tree-id1065 . -14) (#("u" 0 1 (fontified t)) . 5234)) (23429 21667 541567 0) 0 nil]) ((#("j" 0 1 (fontified t)) . -5217) (undo-tree-id1003 . -1) (#("j" 0 1 (fontified t)) . -5218) (undo-tree-id1004 . -1) (#("j" 0 1 (fontified t)) . -5219) (undo-tree-id1005 . -1) 5220 (5212 . 5220) (5209 . 5212)) nil (23429 21667 542065 0) 0 nil]) ((5166 . 5182) (#("            " 0 12 (fontified t)) . 5166) (undo-tree-id1006 . -12) 5178) nil (23429 21667 541583 0) 0 nil]) ((5164 . 5165)) nil (23429 21667 541587 0) 0 nil]) ((5156 . 5164)) nil (23429 21667 541588 0) 0 nil]) ((5153 . 5156) (5135 . 5153) (5122 . 5135) 5121) nil (23429 21667 541590 0) 0 nil]) ((5161 . 5162) (5150 . 5161) (#("." 0 1 (fontified t)) . -5150) (undo-tree-id1007 . -1) 5151 (5145 . 5151) (5142 . 5145) (5135 . 5142) (5122 . 5135) 5099) nil (23429 21667 541594 0) 0 nil]) ((#("            loc = os.path.join(row['URL'], f)
" 0 12 (fontified t) 12 15 (fontified t face font-lock-variable-name-face) 15 33 (fontified t) 33 35 (fontified t) 35 36 (fontified t syntax-table #1# face font-lock-string-face) 36 39 (fontified t face font-lock-string-face) 39 40 (fontified t syntax-table #1# face font-lock-string-face) 40 41 (fontified t) 41 45 (fontified t) 45 46 (fontified t)) . 5123) (undo-tree-id1008 . -46) (undo-tree-id1009 . -46)) nil (23429 21667 541597 0) 0 nil]) ((#("            " 0 12 (fontified t)) . -5169) (undo-tree-id1010 . -12) 5181 (5168 . 5181) 5135) nil (23429 21667 541600 0) 0 nil]) ((#("            compliance.setdefault(row['Issue'], {'.git': False,
                                                 'README': False,
                                                 'data/': False,
                                                 'manifests/': False,
                                                 'code/': False})
" 0 12 (fontified t) 12 23 (fontified t) 23 38 (fontified t) 38 39 (syntax-table #1# fontified t face font-lock-string-face) 39 44 (fontified t face font-lock-string-face) 44 45 (syntax-table #1# fontified t face font-lock-string-face) 45 49 (fontified t) 49 50 (syntax-table #1# fontified t face font-lock-string-face) 50 54 (fontified t face font-lock-string-face) 54 55 (syntax-table #1# fontified t face font-lock-string-face) 55 57 (fontified t) 57 62 (fontified t face font-lock-constant-face) 62 63 (fontified t) 63 64 (fontified t) 64 113 (fontified t) 113 114 (syntax-table #1# fontified t face font-lock-string-face) 114 120 (fontified t face font-lock-string-face) 120 121 (syntax-table #1# fontified t face font-lock-string-face) 121 123 (fontified t) 123 128 (fontified t face font-lock-constant-face) 128 130 (fontified t) 130 179 (fontified t) 179 180 (syntax-table #1# fontified t face font-lock-string-face) 180 183 (fontified t face font-lock-string-face) 183 185 (fontified t face font-lock-string-face) 185 186 (syntax-table #1# fontified t face font-lock-string-face) 186 188 (fontified t) 188 193 (fontified t face font-lock-constant-face) 193 195 (fontified t) 195 244 (fontified t) 244 245 (syntax-table #1# fontified t face font-lock-string-face) 245 255 (fontified t face font-lock-string-face) 255 256 (syntax-table #1# fontified t face font-lock-string-face) 256 258 (fontified t) 258 263 (fontified t face font-lock-constant-face) 263 264 (fontified t) 264 265 (fontified t) 265 314 (fontified t) 314 315 (syntax-table #1# fontified t face font-lock-string-face) 315 320 (fontified t face font-lock-string-face) 320 321 (syntax-table #1# fontified t face font-lock-string-face) 321 323 (fontified t) 323 328 (fontified t face font-lock-constant-face) 328 329 (fontified t) 329 330 (fontified t) 330 331 (fontified t)) . 5169) (undo-tree-id1011 . -287) (undo-tree-id1012 . -22) (undo-tree-id1013 . -287) (undo-tree-id1014 . -265) (undo-tree-id1015 . -265) (undo-tree-id1016 . -331) (undo-tree-id1017 . -331) (undo-tree-id1018 . -195) (undo-tree-id1019 . -195) (undo-tree-id1020 . -130) (undo-tree-id1021 . -130) (undo-tree-id1022 . -64) (undo-tree-id1023 . -64) (undo-tree-id1024 . -287) (undo-tree-id1025 . -22) (undo-tree-id1026 . -287) 5456) nil (23429 21667 541615 0) 0 nil]) ((5583 . 5584) 5570) nil (23429 21667 541617 0) 0 nil]) ((#("        line = 'test -e' 
" 0 8 (fontified t) 8 12 (fontified t face font-lock-variable-name-face) 12 15 (fontified t) 15 16 (fontified t syntax-table #1# face font-lock-string-face) 16 23 (fontified t face font-lock-string-face) 23 24 (fontified t syntax-table #1# face font-lock-string-face) 24 25 (fontified t) 25 26 (fontified t)) . 4483) (undo-tree-id1027 . -26) (undo-tree-id1028 . -26) (undo-tree-id1029 . -8) 4491) nil (23429 21667 541620 0) 0 nil]) ((#("        line = 'test -e' 
" 0 8 (fontified t) 8 12 (fontified t face font-lock-variable-name-face) 12 15 (fontified t) 15 16 (fontified t syntax-table #1# face font-lock-string-face) 16 23 (fontified t face font-lock-string-face) 23 24 (fontified t syntax-table #1# face font-lock-string-face) 24 25 (fontified t) 25 26 (fontified t)) . 5125) (undo-tree-id1030 . -26) (undo-tree-id1031 . -26) (undo-tree-id1032 . -8) 5133) nil (23429 21667 541624 0) 0 nil]) ((#("        files = ['.git', 'README', 'data/', 'manifests/', 'code/']
" 0 8 (fontified t) 8 13 (fontified t face font-lock-variable-name-face) 13 17 (fontified t) 17 18 (fontified t syntax-table #1# face font-lock-string-face) 18 22 (fontified t face font-lock-string-face) 22 23 (fontified t syntax-table #1# face font-lock-string-face) 23 25 (fontified t) 25 26 (fontified t syntax-table #1# face font-lock-string-face) 26 32 (fontified t face font-lock-string-face) 32 33 (fontified t syntax-table #1# face font-lock-string-face) 33 35 (fontified t) 35 36 (fontified t syntax-table #1# face font-lock-string-face) 36 41 (fontified t face font-lock-string-face) 41 42 (fontified t syntax-table #1# face font-lock-string-face) 42 44 (fontified t) 44 45 (fontified t syntax-table #1# face font-lock-string-face) 45 55 (fontified t face font-lock-string-face) 55 56 (fontified t syntax-table #1# face font-lock-string-face) 56 58 (fontified t) 58 59 (fontified t syntax-table #1# face font-lock-string-face) 59 60 (fontified t face font-lock-string-face) 60 64 (fontified t face font-lock-string-face) 64 65 (fontified t syntax-table #1# face font-lock-string-face) 65 66 (fontified t) 66 67 (fontified t)) . 5125) (undo-tree-id1033 . -67) (undo-tree-id1034 . -67) (undo-tree-id1035 . -4) 5129) nil (23429 21667 541627 0) 0 nil]) ((nil rear-nonsticky nil 5040 . 5041) (#("
" 0 1 (fontified nil)) . -5702) (5036 . 5703) 5035) nil (23429 21667 541628 0) 0 nil] [nil nil ((#("    for index,row in df.iterrows():
        if row['URL'] is None:
            continue
        files = ['.git', 'README', 'data/', 'manifests/', 'code/']
        line = 'test -e' 
        for f in files:
            loc = os.path.join(row['URL'], f)
            compliance.setdefault(row['Issue'], {'.git': False,
                                                 'README': False,
                                                 'data/': False,
                                                 'manifests/': False,
                                                 'code/': False})
            compliance[row['Issue']][f] = os.path.isfile(loc)
    return compliance
" 0 4 (fontified t) 4 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 17 (fontified t) 17 18 (fontified t) 18 20 (fontified t face font-lock-keyword-face) 20 24 (fontified t) 24 34 (fontified t) 34 35 (fontified t) 35 36 (fontified t) 36 44 (fontified t) 44 46 (fontified t face font-lock-keyword-face) 46 51 (fontified t) 51 52 (fontified t syntax-table #1# face font-lock-string-face) 52 55 (fontified t face font-lock-string-face) 55 56 (fontified t syntax-table #1# face font-lock-string-face) 56 57 (fontified t) 57 58 (fontified t) 58 60 (fontified t face font-lock-keyword-face) 60 61 (fontified t) 61 65 (fontified t face font-lock-constant-face) 65 67 (fontified t) 67 75 (fontified t) 75 79 (fontified t) 79 87 (fontified t face font-lock-keyword-face) 87 88 (fontified t) 88 96 (fontified t) 96 101 (fontified t face font-lock-variable-name-face) 101 105 (fontified t) 105 106 (fontified t syntax-table #1# face font-lock-string-face) 106 110 (fontified t face font-lock-string-face) 110 111 (fontified t syntax-table #1# face font-lock-string-face) 111 113 (fontified t) 113 114 (fontified t syntax-table #1# face font-lock-string-face) 114 120 (fontified t face font-lock-string-face) 120 121 (fontified t syntax-table #1# face font-lock-string-face) 121 123 (fontified t) 123 124 (fontified t syntax-table #1# face font-lock-string-face) 124 129 (fontified t face font-lock-string-face) 129 130 (fontified t syntax-table #1# face font-lock-string-face) 130 132 (fontified t) 132 133 (fontified t syntax-table #1# face font-lock-string-face) 133 143 (fontified t face font-lock-string-face) 143 144 (fontified t syntax-table #1# face font-lock-string-face) 144 146 (fontified t) 146 147 (fontified t syntax-table #1# face font-lock-string-face) 147 148 (fontified t face font-lock-string-face) 148 152 (fontified t face font-lock-string-face) 152 153 (fontified t syntax-table #1# face font-lock-string-face) 153 154 (fontified t) 154 155 (fontified t) 155 163 (fontified t) 163 167 (fontified t face font-lock-variable-name-face) 167 170 (fontified t) 170 171 (fontified t syntax-table #1# face font-lock-string-face) 171 178 (fontified t face font-lock-string-face) 178 179 (fontified t syntax-table #1# face font-lock-string-face) 179 180 (fontified t) 180 181 (fontified t) 181 189 (fontified t) 189 192 (fontified t face font-lock-keyword-face) 192 193 (fontified t) 193 194 (fontified t) 194 195 (fontified t) 195 197 (fontified t face font-lock-keyword-face) 197 198 (fontified t) 198 204 (fontified t) 204 205 (fontified t) 205 217 (fontified t) 217 220 (fontified t face font-lock-variable-name-face) 220 238 (fontified t) 238 240 (fontified t) 240 241 (fontified t syntax-table #1# face font-lock-string-face) 241 244 (fontified t face font-lock-string-face) 244 245 (fontified t syntax-table #1# face font-lock-string-face) 245 246 (fontified t) 246 250 (fontified t) 250 251 (fontified t) 251 263 (fontified t) 263 274 (fontified t) 274 289 (fontified t) 289 290 (fontified t syntax-table #1# face font-lock-string-face) 290 295 (fontified t face font-lock-string-face) 295 296 (fontified t syntax-table #1# face font-lock-string-face) 296 300 (fontified t) 300 301 (fontified t syntax-table #1# face font-lock-string-face) 301 305 (fontified t face font-lock-string-face) 305 306 (fontified t syntax-table #1# face font-lock-string-face) 306 308 (fontified t) 308 313 (fontified t face font-lock-constant-face) 313 314 (fontified t) 314 315 (fontified t) 315 364 (fontified t) 364 365 (fontified t syntax-table #1# face font-lock-string-face) 365 371 (fontified t face font-lock-string-face) 371 372 (fontified t syntax-table #1# face font-lock-string-face) 372 374 (fontified t) 374 379 (fontified t face font-lock-constant-face) 379 381 (fontified t) 381 430 (fontified t) 430 431 (fontified t syntax-table #1# face font-lock-string-face) 431 434 (fontified t face font-lock-string-face) 434 436 (fontified t face font-lock-string-face) 436 437 (fontified t syntax-table #1# face font-lock-string-face) 437 439 (fontified t) 439 444 (fontified t face font-lock-constant-face) 444 446 (fontified t) 446 495 (fontified t) 495 496 (fontified t syntax-table #1# face font-lock-string-face) 496 506 (fontified t face font-lock-string-face) 506 507 (fontified t syntax-table #1# face font-lock-string-face) 507 509 (fontified t) 509 514 (fontified t face font-lock-constant-face) 514 515 (fontified t) 515 516 (fontified t) 516 565 (fontified t) 565 566 (fontified t syntax-table #1# face font-lock-string-face) 566 571 (fontified t face font-lock-string-face) 571 572 (fontified t syntax-table #1# face font-lock-string-face) 572 574 (fontified t) 574 579 (fontified t face font-lock-constant-face) 579 580 (fontified t) 580 581 (fontified t) 581 582 (fontified t) 582 594 (fontified t) 594 604 (fontified t) 604 605 (fontified t) 605 609 (fontified t) 609 610 (fontified t syntax-table #1# face font-lock-string-face) 610 615 (fontified t face font-lock-string-face) 615 616 (fontified t syntax-table #1# face font-lock-string-face) 616 621 (fontified t) 621 632 (fontified t) 632 643 (fontified t) 643 644 (fontified t) 644 648 (fontified t) 648 654 (fontified t face font-lock-keyword-face) 654 665 (fontified t) 665 666 (fontified t)) . 4328) (undo-tree-id778 . -654) (undo-tree-id779 . -10) (undo-tree-id780 . -654) (undo-tree-id781 . -644) (undo-tree-id782 . -644) (undo-tree-id783 . -181) (undo-tree-id784 . -181) (undo-tree-id785 . -644) (undo-tree-id786 . -24) (undo-tree-id787 . -155) (undo-tree-id788 . -644) (undo-tree-id789 . -644) (undo-tree-id790 . -644) (undo-tree-id791 . -582) (undo-tree-id792 . -582) (undo-tree-id793 . -155) (undo-tree-id794 . -155) (undo-tree-id795 . -536) (undo-tree-id796 . -67) (undo-tree-id797 . -67) (undo-tree-id798 . -36) (undo-tree-id799 . -36) (undo-tree-id800 . -205) (undo-tree-id801 . -205) (undo-tree-id802 . -251) (undo-tree-id803 . -251) (undo-tree-id804 . -315) (undo-tree-id805 . -315) (undo-tree-id806 . -381) (undo-tree-id807 . -381) (undo-tree-id808 . -666) (undo-tree-id809 . -666) (undo-tree-id810 . -446) (undo-tree-id811 . -446) (undo-tree-id812 . -516) (undo-tree-id813 . -516) (undo-tree-id814 . -88) (undo-tree-id815 . -88) (undo-tree-id816 . -71) (undo-tree-id817 . -71) (undo-tree-id818 . -520) (undo-tree-id819 . -520) (undo-tree-id820 . -251) (undo-tree-id821 . -251) (undo-tree-id822 . -644) (undo-tree-id823 . -644) (undo-tree-id824 . -263) (undo-tree-id825 . -263) (undo-tree-id826 . -654) (undo-tree-id827 . -1) (undo-tree-id828 . -36) (undo-tree-id829 . -37) (undo-tree-id830 . -40) (undo-tree-id831 . -41) (undo-tree-id832 . -67) (undo-tree-id833 . -68) (undo-tree-id834 . -71) (undo-tree-id835 . -72) (undo-tree-id836 . -75) (undo-tree-id837 . -76) (undo-tree-id838 . -88) (undo-tree-id839 . -89) (undo-tree-id840 . -92) (undo-tree-id841 . -93) (undo-tree-id842 . -155) (undo-tree-id843 . -156) (undo-tree-id844 . -159) (undo-tree-id845 . -160) (undo-tree-id846 . -181) (undo-tree-id847 . -182) (undo-tree-id848 . -185) (undo-tree-id849 . -186) (undo-tree-id850 . -205) (undo-tree-id851 . -206) (undo-tree-id852 . -209) (undo-tree-id853 . -210) (undo-tree-id854 . -213) (undo-tree-id855 . -214) (undo-tree-id856 . -251) (undo-tree-id857 . -252) (undo-tree-id858 . -255) (undo-tree-id859 . -256) (undo-tree-id860 . -259) (undo-tree-id861 . -260) (undo-tree-id862 . -315) (undo-tree-id863 . -316) (undo-tree-id864 . -319) (undo-tree-id865 . -320) (undo-tree-id866 . -323) (undo-tree-id867 . -324) (undo-tree-id868 . -327) (undo-tree-id869 . -328) (undo-tree-id870 . -331) (undo-tree-id871 . -332) (undo-tree-id872 . -335) (undo-tree-id873 . -336) (undo-tree-id874 . -339) (undo-tree-id875 . -340) (undo-tree-id876 . -343) (undo-tree-id877 . -344) (undo-tree-id878 . -347) (undo-tree-id879 . -348) (undo-tree-id880 . -351) (undo-tree-id881 . -352) (undo-tree-id882 . -355) (undo-tree-id883 . -356) (undo-tree-id884 . -359) (undo-tree-id885 . -360) (undo-tree-id886 . -363) (undo-tree-id887 . -364) (undo-tree-id888 . -381) (undo-tree-id889 . -382) (undo-tree-id890 . -385) (undo-tree-id891 . -386) (undo-tree-id892 . -389) (undo-tree-id893 . -390) (undo-tree-id894 . -393) (undo-tree-id895 . -394) (undo-tree-id896 . -397) (undo-tree-id897 . -398) (undo-tree-id898 . -401) (undo-tree-id899 . -402) (undo-tree-id900 . -405) (undo-tree-id901 . -406) (undo-tree-id902 . -409) (undo-tree-id903 . -410) (undo-tree-id904 . -413) (undo-tree-id905 . -414) (undo-tree-id906 . -417) (undo-tree-id907 . -418) (undo-tree-id908 . -421) (undo-tree-id909 . -422) (undo-tree-id910 . -425) (undo-tree-id911 . -426) (undo-tree-id912 . -429) (undo-tree-id913 . -430) (undo-tree-id914 . -446) (undo-tree-id915 . -447) (undo-tree-id916 . -450) (undo-tree-id917 . -451) (undo-tree-id918 . -454) (undo-tree-id919 . -455) (undo-tree-id920 . -458) (undo-tree-id921 . -459) (undo-tree-id922 . -462) (undo-tree-id923 . -463) (undo-tree-id924 . -466) (undo-tree-id925 . -467) (undo-tree-id926 . -470) (undo-tree-id927 . -471) (undo-tree-id928 . -474) (undo-tree-id929 . -475) (undo-tree-id930 . -478) (undo-tree-id931 . -479) (undo-tree-id932 . -482) (undo-tree-id933 . -483) (undo-tree-id934 . -486) (undo-tree-id935 . -487) (undo-tree-id936 . -490) (undo-tree-id937 . -491) (undo-tree-id938 . -494) (undo-tree-id939 . -495) (undo-tree-id940 . -516) (undo-tree-id941 . -517) (undo-tree-id942 . -520) (undo-tree-id943 . -521) (undo-tree-id944 . -524) (undo-tree-id945 . -525) (undo-tree-id946 . -528) (undo-tree-id947 . -529) (undo-tree-id948 . -532) (undo-tree-id949 . -533) (undo-tree-id950 . -536) (undo-tree-id951 . -537) (undo-tree-id952 . -540) (undo-tree-id953 . -541) (undo-tree-id954 . -544) (undo-tree-id955 . -545) (undo-tree-id956 . -548) (undo-tree-id957 . -549) (undo-tree-id958 . -552) (undo-tree-id959 . -553) (undo-tree-id960 . -556) (undo-tree-id961 . -557) (undo-tree-id962 . -560) (undo-tree-id963 . -561) (undo-tree-id964 . -564) (undo-tree-id965 . -565) (undo-tree-id966 . -582) (undo-tree-id967 . -583) (undo-tree-id968 . -586) (undo-tree-id969 . -587) (undo-tree-id970 . -590) (undo-tree-id971 . -591) (undo-tree-id972 . -644) (undo-tree-id973 . -645) (undo-tree-id974 . -644) (undo-tree-id975 . -645) (undo-tree-id976 . -666) (undo-tree-id977 . -10) (undo-tree-id978 . -654) (undo-tree-id979 . -180) (undo-tree-id980 . -163) (undo-tree-id981 . -44) (undo-tree-id982 . -44) (undo-tree-id983 . -44) (undo-tree-id984 . -4) (undo-tree-id985 . -4) (undo-tree-id986 . -4) (undo-tree-id987 . -163) (undo-tree-id988 . -35) (undo-tree-id989 . -66) (undo-tree-id990 . -87) (undo-tree-id991 . -154) (undo-tree-id992 . -180) (undo-tree-id993 . -204) (undo-tree-id994 . -250) (undo-tree-id995 . -581) (undo-tree-id996 . -643) (undo-tree-id997 . -665) 4982) ((4328 . 4994)) (23429 21408 720330 0) 0 nil]) ((5024 . 5031) (5020 . 5024) (#("    " 0 4 (fontified nil)) . 5019) (undo-tree-id998 . -4) (5023 . 5024) (5018 . 5023) (4999 . 5018) (#("c" 0 1 (fontified t face font-lock-function-name-face)) . -4999) (undo-tree-id999 . -1) (#("h" 0 1 (fontified t face font-lock-function-name-face)) . -5000) (undo-tree-id1000 . -1) (#("e" 0 1 (fontified t face font-lock-function-name-face)) . -5001) (undo-tree-id1001 . -1) (#("c" 0 1 (fontified t face font-lock-function-name-face)) . -5002) (undo-tree-id1002 . -1) 5003 (4995 . 5003) (4994 . 4995) (4993 . 4994) 4972) nil (23429 21408 722307 0) 0 nil]) ((443 . 451) (#("username" 0 8 (fontified t face font-lock-variable-name-face)) . 443) (t 23428 23680 0 0)) nil (23429 21408 720350 0) 0 nil]) ((nil rear-nonsticky nil 363 . 364) (#("
" 0 1 (fontified nil)) . -409) (363 . 410) (t 23428 23556 0 0)) nil (23428 23680 425125 0) 0 nil]) ((#("    print(compliance)
" 0 4 (fontified t) 4 9 (fontified t face font-lock-keyword-face) 9 12 (fontified t) 12 21 (fontified t) 21 22 (fontified t)) . 4926) (undo-tree-id743 . -22) (undo-tree-id744 . -22) (undo-tree-id745 . -22) (undo-tree-id746 . -22) (undo-tree-id747 . -22) (undo-tree-id748 . -22) (undo-tree-id749 . -4) (undo-tree-id750 . -21) (undo-tree-id751 . -4) (undo-tree-id752 . -4) (undo-tree-id753 . -4) (undo-tree-id754 . -1) (undo-tree-id755 . -22) (undo-tree-id756 . -21) (undo-tree-id757 . -21) 4930) nil (23428 23556 700019 0) 0 nil]) ((#("            print(row['Issue'])
" 0 12 (fontified t) 12 15 (face font-lock-keyword-face fontified t) 15 17 (face font-lock-keyword-face fontified t) 17 22 (fontified t) 22 23 (fontified t syntax-table #1# face font-lock-string-face) 23 28 (fontified t face font-lock-string-face) 28 29 (fontified t syntax-table #1# face font-lock-string-face) 29 31 (fontified t) 31 32 (fontified t)) . 4533) (undo-tree-id758 . -32) (undo-tree-id759 . -32) (undo-tree-id760 . -12) (undo-tree-id761 . -12) (undo-tree-id762 . -12) (undo-tree-id763 . -31) (undo-tree-id764 . -17) (undo-tree-id765 . -12) (undo-tree-id766 . -12) (undo-tree-id767 . -12) (undo-tree-id768 . -1) (undo-tree-id769 . -4) (undo-tree-id770 . -5) (undo-tree-id771 . -8) (undo-tree-id772 . -9) (undo-tree-id773 . -32) (undo-tree-id774 . -31) (undo-tree-id775 . -12) (undo-tree-id776 . -12) (undo-tree-id777 . -31) 4545 (t 23428 23546 0 0)) nil (23428 23556 700043 0) 0 nil] [nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil nil ((#("    print(compliance)
" 0 4 (fontified t) 4 9 (fontified t face font-lock-keyword-face) 9 21 (fontified t) 21 22 (fontified t)) . 4512) (undo-tree-id592 . -22) (undo-tree-id593 . -22) (undo-tree-id594 . -22) (undo-tree-id595 . -22) (undo-tree-id596 . -22) (undo-tree-id597 . -22) (undo-tree-id598 . -12) (undo-tree-id600 . -22) 4524) ((4512 . 4534) (t 23428 23477 0 0)) (23428 23477 363829 0) 0 nil]) ((#("            print(row['Issue'])
" 0 12 (fontified t) 12 15 (face font-lock-keyword-face fontified t) 15 17 (fontified t face font-lock-keyword-face) 17 22 (fontified t) 22 23 (fontified t syntax-table #1# face font-lock-string-face) 23 28 (fontified t face font-lock-string-face) 28 29 (fontified t syntax-table #1# face font-lock-string-face) 29 31 (fontified t) 31 32 (fontified t)) . 4119) (undo-tree-id601 . -32) (undo-tree-id602 . -32) (undo-tree-id603 . -13) 4132 (t 23428 23461 0 0)) ((4119 . 4151)) (23428 23537 567905 0) 0 nil]) ((nil rear-nonsticky nil 363 . 364) (#("
" 0 1 (fontified nil)) . -409) (363 . 410)) ((#("
requests.packages.urllib3.disable_warnings() 
" 0 1 (fontified nil rear-nonsticky nil) 1 46 (fontified nil) 46 47 (fontified nil)) . 363) (undo-tree-id604 . -1) (undo-tree-id605 . -46) (undo-tree-id606 . -46) (409 . 410) (nil rear-nonsticky t 363 . 364)) (23428 23537 792978 0) 0 nil]) ((#("    redmine = Redmine(CHANMINE_URL, username=username,
                      password=password, requests={'verify': False})
" 0 4 (fontified t) 4 8 (fontified t face font-lock-variable-name-face) 8 11 (fontified t face font-lock-variable-name-face) 11 33 (fontified t) 33 52 (fontified t) 52 55 (fontified t) 55 68 (fontified t) 68 81 (fontified t) 81 97 (fontified t) 97 100 (fontified t) 100 106 (fontified t) 106 107 (syntax-table #1# fontified t face font-lock-string-face) 107 108 (fontified t face font-lock-string-face) 108 112 (fontified t face font-lock-string-face) 112 113 (fontified t face font-lock-string-face) 113 114 (syntax-table #1# fontified t face font-lock-string-face) 114 116 (fontified t) 116 118 (fontified t face font-lock-constant-face) 118 120 (fontified t face font-lock-constant-face) 120 121 (fontified t face font-lock-constant-face) 121 124 (fontified t)) . 4700) (undo-tree-id530 . -59) (undo-tree-id531 . -4) (undo-tree-id532 . -59) (undo-tree-id533 . -124) (undo-tree-id534 . -124) (undo-tree-id535 . -55) (undo-tree-id536 . -55) (undo-tree-id537 . -59) (undo-tree-id538 . -4) (undo-tree-id539 . -59) 4759) ((4700 . 4824)) (23428 23537 984547 0) 0 nil]) ((#("    redmine = Redmine(CHANMINE_URL, username=username,
                      password=password, requests={'verify': False})
" 0 4 (fontified t) 4 11 (fontified t face font-lock-variable-name-face) 11 106 (fontified t) 106 107 (syntax-table #1# fontified t face font-lock-string-face) 107 113 (fontified t face font-lock-string-face) 113 114 (syntax-table #1# fontified t face font-lock-string-face) 114 116 (fontified t) 116 121 (fontified t face font-lock-constant-face) 121 124 (fontified t)) . 3516) (undo-tree-id540 . -59) (undo-tree-id541 . -4) (undo-tree-id542 . -59) (undo-tree-id543 . -124) (undo-tree-id544 . -124) (undo-tree-id545 . -55) (undo-tree-id546 . -55) (undo-tree-id547 . -59) (undo-tree-id548 . -4) (undo-tree-id549 . -59) 3575) ((3516 . 3640)) (23428 23538 141256 0) 0 nil]) ((#("    redmine = Redmine(CHANMINE_URL, username=username,
                      password=password, requests={'verify': False})
" 0 4 (fontified t) 4 11 (fontified t face font-lock-variable-name-face) 11 106 (fontified t) 106 107 (syntax-table #1# fontified t face font-lock-string-face) 107 113 (fontified t face font-lock-string-face) 113 114 (syntax-table #1# fontified t face font-lock-string-face) 114 116 (fontified t) 116 121 (fontified t face font-lock-constant-face) 121 124 (fontified t)) . 3324) (undo-tree-id550 . -58) (undo-tree-id551 . -3) (undo-tree-id552 . -58) (undo-tree-id553 . -55) (undo-tree-id554 . -55) (undo-tree-id555 . -124) (undo-tree-id556 . -124) (undo-tree-id557 . -58) (undo-tree-id558 . -3) (undo-tree-id559 . -58) 3382) ((3324 . 3448)) (23428 23538 332404 0) 0 nil]) ((#("    redmine = Redmine(CHANMINE_URL, username=username,
                      password=password, requests={'verify': False})
" 0 1 (fontified t) 1 4 (fontified t) 4 11 (fontified t face font-lock-variable-name-face) 11 15 (fontified t) 15 16 (fontified t) 16 19 (fontified t) 19 37 (fontified t) 37 55 (fontified t) 55 106 (fontified t) 106 107 (syntax-table #1# fontified t face font-lock-string-face) 107 113 (fontified t face font-lock-string-face) 113 114 (syntax-table #1# fontified t face font-lock-string-face) 114 116 (fontified t) 116 117 (fontified t face font-lock-constant-face) 117 121 (fontified t face font-lock-constant-face) 121 124 (fontified t)) . 3021) (undo-tree-id560 . -55) (undo-tree-id561 . -55) (undo-tree-id562 . -124) (undo-tree-id563 . -124) (undo-tree-id564 . -55) (undo-tree-id565 . -55) (undo-tree-id566 . -55) (undo-tree-id567 . -55) 3076) ((3021 . 3145)) (23428 23538 478768 0) 0 nil]) ((#("    redmine = Redmine(CHANMINE_URL, username=username,
                      password=password, requests={'verify': False})
" 0 4 (fontified t) 4 11 (fontified t face font-lock-variable-name-face) 11 15 (fontified t) 15 55 (fontified t) 55 106 (fontified t) 106 107 (syntax-table #1# fontified t face font-lock-string-face) 107 113 (fontified t face font-lock-string-face) 113 114 (syntax-table #1# fontified t face font-lock-string-face) 114 116 (fontified t) 116 121 (fontified t face font-lock-constant-face) 121 124 (fontified t)) . 2707) (undo-tree-id568 . -72) (undo-tree-id569 . -17) (undo-tree-id570 . -72) (undo-tree-id571 . -124) (undo-tree-id572 . -124) (undo-tree-id573 . -55) (undo-tree-id574 . -55) (undo-tree-id575 . -72) (undo-tree-id576 . -17) (undo-tree-id577 . -72) 2779) ((2707 . 2831)) (23428 23538 647583 0) 0 nil]) ((365 . 368) (#("api" 0 3 (fontified t face font-lock-variable-name-face)) . 365) (undo-tree-id578 . -3) (undo-tree-id579 . -3)) ((365 . 368) (#("API" 0 3 (fontified t face font-lock-variable-name-face)) . 365)) (23428 23538 827611 0) 0 nil]) ((700 . 707) (#("API_" 0 4 (fontified t)) . -700) (undo-tree-id580 . -4) 704 (700 . 704)) ((#("API_" 0 4 (fontified nil)) . 700) (700 . 704) (#("API_KEY" 0 7 (fontified t)) . 700)) (23428 23539 2083 0) 0 nil]) ((#("\"" 0 1 (fontified t syntax-table #1# face font-lock-string-face)) . 700)) ((700 . 701)) (23428 23539 164762 0) 0 nil]) ((#("\"" 0 1 (syntax-table #1# fontified t face font-lock-string-face)) . 700)) ((700 . 701)) (23428 23539 344953 0) 0 nil]) ((nil rear-nonsticky nil 415 . 416) (nil fontified nil 376 . 416) (nil fontified t 376 . 416) (nil face font-lock-string-face 376 . 416) (376 . 416) 375) ((#("cbee9bdd8835ad0061508d43e4844511a67deb46" 0 39 (fontified nil face font-lock-string-face) 39 40 (rear-nonsticky nil fontified nil face font-lock-string-face)) . 376) (nil fontified nil 415 . 416) (nil fontified nil 376 . 415) (nil rear-nonsticky t 415 . 416)) (23428 23539 626044 0) 0 nil]) ((#("cbee9bdd8835ad0061508d43e4844511a67deb46" 0 39 (fontified t face font-lock-string-face) 39 40 (rear-nonsticky t fontified t face font-lock-string-face)) . 661) 660) ((661 . 701)) (23428 23539 839787 0) 0 nil]) ((#("    " 0 4 (fontified t)) . -624)) ((624 . 628)) (23428 23540 76474 0) 0 nil]) ((#("        " 0 8 (fontified nil)) . -628) (624 . 628)) ((#("    " 0 4 (fontified nil)) . 624) (undo-tree-id607 . -4) (undo-tree-id608 . -1) (undo-tree-id609 . -4) (undo-tree-id610 . -4) (undo-tree-id611 . -4) (undo-tree-id612 . -4) (undo-tree-id613 . -1) (undo-tree-id614 . -4) (628 . 636)) (23428 23540 279024 0) 0 nil]) ((#("k" 0 1 (fontified t)) . -740) (undo-tree-id581 . -1) 741 (740 . 741) (nil rear-nonsticky nil 739 . 740) (624 . 740) (623 . 624) (nil face font-lock-string-face 622 . 623) (nil fontified t 622 . 623) (622 . 623) 595) ((#("
" 0 1 (fontified nil face font-lock-string-face)) . 622) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (nil fontified nil 622 . 623) (nil face nil 622 . 623) (#("
" 0 1 (fontified t)) . 623) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (#("        redmine = Redmine(CHANMINE_URL, key=\"cbee9bdd8835ad0061508d43e4844511a67deb46\", requests={'verify': False})
" 0 8 (fontified nil) 8 15 (fontified nil face font-lock-variable-name-face) 15 16 (fontified nil) 16 26 (fontified nil) 26 38 (fontified nil) 38 43 (fontified nil) 43 44 (fontified nil) 44 45 (fontified nil syntax-table #1# face font-lock-string-face) 45 84 (fontified nil face font-lock-string-face) 84 85 (rear-nonsticky t fontified nil face font-lock-string-face) 85 86 (fontified nil syntax-table #1# face font-lock-string-face) 86 88 (fontified nil) 88 96 (fontified nil) 96 98 (fontified nil) 98 99 (fontified nil syntax-table #1# face font-lock-string-face) 99 105 (fontified nil face font-lock-string-face) 105 106 (fontified nil syntax-table #1# face font-lock-string-face) 106 108 (fontified nil) 108 113 (fontified nil face font-lock-constant-face) 113 114 (rear-nonsticky t fontified nil) 114 115 (fontified nil) 115 116 (rear-nonsticky nil fontified nil)) . 624) (undo-tree-id693 . -89) (undo-tree-id694 . -116) (undo-tree-id695 . -116) (undo-tree-id696 . -89) (undo-tree-id697 . -88) (undo-tree-id698 . -86) (undo-tree-id699 . -45) (undo-tree-id700 . -45) (undo-tree-id701 . -45) (undo-tree-id702 . -45) (undo-tree-id703 . -45) (undo-tree-id704 . -45) (undo-tree-id705 . -1) (undo-tree-id706 . -4) (undo-tree-id707 . -5) (undo-tree-id708 . -8) (undo-tree-id709 . -8) (undo-tree-id710 . -45) (undo-tree-id711 . -8) (undo-tree-id712 . -8) (undo-tree-id713 . -45) (undo-tree-id714 . -1) (undo-tree-id715 . -4) (undo-tree-id716 . -5) (nil rear-nonsticky t 739 . 740) (#("k" 0 1 (fontified nil)) . 740) (740 . 741)) (23428 23540 503700 0) 0 nil]) ((364 . 368) (#("
API" 0 1 (fontified t) 1 4 (fontified t face font-lock-variable-name-face)) . 364)) ((364 . 368) (#("
api" 0 1 (fontified t) 1 4 (fontified t face font-lock-variable-name-face)) . 364) (undo-tree-id717 . -1) (undo-tree-id718 . -1)) (23428 23540 729269 0) 0 nil]) ((#("global password
" 0 6 (fontified t face font-lock-keyword-face) 6 15 (fontified t) 15 16 (fontified t)) . 364) (undo-tree-id582 . -16) (undo-tree-id583 . -16)) ((364 . 380)) (23428 23540 942443 0) 0 nil]) ((#("global username
" 0 6 (fontified t face font-lock-keyword-face) 6 16 (fontified t)) . 364) (undo-tree-id584 . -16) (undo-tree-id585 . -16)) ((364 . 380)) (23428 23541 223753 0) 0 nil]) ((#("password = getpass.getpass()
" 0 8 (fontified t face font-lock-variable-name-face) 8 28 (fontified t) 28 29 (fontified t)) . 410) (undo-tree-id586 . -29) (undo-tree-id587 . -29)) ((410 . 439)) (23428 23541 769760 0) 0 nil]) ((#("username = input('Username: ')
" 0 8 (fontified t face font-lock-variable-name-face) 8 11 (fontified t) 11 16 (fontified t face font-lock-builtin-face) 16 17 (fontified t) 17 18 (syntax-table #1# fontified t face font-lock-string-face) 18 28 (fontified t face font-lock-string-face) 28 29 (syntax-table #1# fontified t face font-lock-string-face) 29 31 (fontified t)) . 410) (undo-tree-id588 . -11) (undo-tree-id589 . -31) (undo-tree-id590 . -31) 421) ((410 . 441)) (23428 23542 731548 0) 0 nil]) ((400 . 409) (#("U" 0 1 (fontified t)) . -400) (undo-tree-id591 . -1) 401 (397 . 401) (396 . 397) (t 23428 22433 0 0) 396) ((#("
" 0 1 (fontified t)) . 396) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (#("APIU" 0 3 (fontified nil face font-lock-variable-name-face) 3 4 (fontified nil)) . 397) (undo-tree-id732 . -3) (undo-tree-id733 . -3) (undo-tree-id734 . -3) (undo-tree-id735 . -3) (undo-tree-id736 . -3) (400 . 401) (#("_KEY = \"\"" 0 4 (fontified t face font-lock-variable-name-face) 4 7 (fontified t) 7 8 (syntax-table #1# fontified t face font-lock-string-face) 8 9 (syntax-table #1# fontified t face font-lock-string-face)) . 400) (undo-tree-id737 . 9) (undo-tree-id738 . -9) (undo-tree-id739 . -8) (undo-tree-id740 . -7) (undo-tree-id741 . -7) (undo-tree-id742 . -7)) (23428 23543 249066 0) 0 nil]) ((5103 . 5115)) nil (23428 23544 115173 0) 0 nil]) ((2611 . 2623)) nil (23428 22432 898415 0) 0 nil]) ((2571 . 2577) (#("c" 0 1 (fontified t)) . -2571) (undo-tree-id522 . -1) (#("n" 0 1 (fontified t)) . -2572) (undo-tree-id523 . -1) (#("e" 0 1 (fontified t)) . -2573) (undo-tree-id524 . -1) (#(" " 0 1 (fontified t)) . -2574) (undo-tree-id525 . -1) 2575 (2564 . 2575)) nil (23428 22432 898428 0) 0 nil]) ((6580 . 6590) (#("c" 0 1 (fontified t)) . -6580) (undo-tree-id526 . -1) (#("i" 0 1 (fontified t)) . -6581) (undo-tree-id527 . -1) (#("n" 0 1 (fontified t)) . -6582) (undo-tree-id528 . -1) (#("p" 0 1 (fontified t)) . -6583) (undo-tree-id529 . -1) 6584 (6567 . 6584) (t 23428 21974 0 0)) nil (23428 22432 898436 0) 0 nil]) ((4907 . 4910) (#("i" 0 1 (fontified t face font-lock-variable-name-face)) . -4907) (undo-tree-id509 . -1) (#("[" 0 1 (fontified t)) . -4908) (undo-tree-id510 . -1) (#("f" 0 1 (fontified t)) . -4909) (undo-tree-id511 . -1) 4910 (4906 . 4910)) nil (23428 21974 811858 0) 0 nil]) ((#("]" 0 1 (fontified t)) . 4906) (undo-tree-id512 . 1) (undo-tree-id513 . -1)) nil (23428 21974 811864 0) 0 nil]) ((#("]" 0 1 (fontified t)) . 4906) (undo-tree-id514 . 1) (undo-tree-id515 . -1)) nil (23428 21974 811867 0) 0 nil]) ((#("f" 0 1 (fontified t)) . 4906)) nil (23428 21974 811869 0) 0 nil]) ((#("[" 0 1 (fontified t)) . 4906) (undo-tree-id516 . 1) (undo-tree-id517 . -1)) nil (23428 21974 811871 0) 0 nil]) ((4909 . 4910) (#(")" 0 1 (fontified t)) . 4909) (undo-tree-id518 . 1) (undo-tree-id519 . -1)) nil (23428 21974 811874 0) 0 nil]) ((4893 . 4894) (#("(" 0 1 (fontified t)) . 4893) (undo-tree-id520 . 1) (undo-tree-id521 . -1)) nil (23428 21974 811877 0) 0 nil]) ((#(".setdefault" 0 1 (fontified t) 1 11 (fontified t)) . 4893) (t 23428 21939 0 0)) nil (23428 21974 811879 0) 0 nil]) ((#("[" 0 1 (fontified t)) . 4905) (undo-tree-id498 . 1) (undo-tree-id499 . -1)) nil (23428 21939 688394 0) 0 nil]) ((#("]" 0 1 (fontified t)) . 4918) (undo-tree-id500 . 1) (undo-tree-id501 . -1)) nil (23428 21939 688400 0) 0 nil]) ((4922 . 4923)) nil (23428 21939 688402 0) 0 nil]) ((4803 . 4804)) nil (23428 21939 688403 0) 0 nil]) ((4862 . 4867) (4859 . 4862) (#(";" 0 1 (fontified t face font-lock-string-face)) . -4859) (undo-tree-id502 . -1) 4860 (4858 . 4860) (#("'" 0 1 (fontified t syntax-table #1# face font-lock-string-face)) . -4858) (undo-tree-id503 . -1) 4859 (4804 . 4853) (#("            " 0 12 (fontified nil)) . 4804) (4816 . 4822) (4803 . 4816) (4796 . 4803) (4735 . 4784) (#("            " 0 12 (fontified nil)) . 4735) (4758 . 4759) (4757 . 4758) (4748 . 4757) (#("mani" 0 4 (fontified t face font-lock-string-face)) . -4748) (undo-tree-id504 . -4) 4752 (4747 . 4752) (4734 . 4747) (4727 . 4734) (4726 . 4727) (#("L" 0 1 (fontified t)) . -4726) (undo-tree-id505 . -1) 4727 (4726 . 4727) (4670 . 4719) (#("            " 0 12 (fontified nil)) . 4670) (4682 . 4689) (4669 . 4682) (4661 . 4669) (#("L" 0 1 (fontified t)) . -4661) (undo-tree-id506 . -1) (#(" " 0 1 (fontified t)) . -4662) (undo-tree-id507 . -1) 4663 (4661 . 4663) (4604 . 4653) (#("            " 0 12 (fontified nil)) . 4604) (4617 . 4624) (#("." 0 1 (fontified t face font-lock-string-face)) . -4617) (undo-tree-id508 . -1) 4618 (4616 . 4618) (4603 . 4616) (4595 . 4603) (4589 . 4595)) nil (23428 21939 688421 0) 0 nil] [nil nil ((4604 . 4605) (4591 . 4604) 4589) ((#("
            " 0 1 (fontified t) 1 13 (fontified nil)) . 4591) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -13) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -2) (undo-tree-id481 . -5) (undo-tree-id482 . -6) (undo-tree-id483 . -9) (undo-tree-id484 . -10) (undo-tree-id485 . -13) (undo-tree-id486 . -1) (undo-tree-id487 . -2) (undo-tree-id488 . -5) (undo-tree-id489 . -6) (undo-tree-id490 . -9) (undo-tree-id491 . -10) (undo-tree-id492 . -1) (undo-tree-id493 . -2) (undo-tree-id494 . -5) (undo-tree-id495 . -6) (undo-tree-id496 . -9) (undo-tree-id497 . -10) (#("u" 0 1 (fontified t)) . 4604)) (23428 21777 352375 0) 0 nil]) ((4588 . 4590) (#("files" 0 5 (fontified t)) . 4588)) nil (23428 21777 353069 0) 0 nil]) ((4588 . 4593)) nil (23428 21777 352381 0) 0 nil]) ((4588 . 4589)) nil (23428 21777 352382 0) 0 nil]) ((#(")" 0 1 (fontified t)) . 4588) (undo-tree-id456 . 1) (undo-tree-id457 . 1) (undo-tree-id458 . -1)) nil (23428 21777 352390 0) 0 nil]) ((#("}" 0 1 (fontified t)) . 4588) (undo-tree-id459 . 1)) nil (23428 21777 352393 0) 0 nil]) ((#("'" 0 1 (fontified t syntax-table #1# face font-lock-string-face)) . 4588)) nil (23428 21777 352394 0) 0 nil]) ((#("{" 0 1 (fontified t)) . 4588) (undo-tree-id460 . 1) (undo-tree-id461 . -1)) nil (23428 21777 352399 0) 0 nil]) ((4589 . 4590)) nil (23428 21777 352400 0) 0 nil]) ((#("g" 0 1 (fontified t)) . -4591) (undo-tree-id462 . -1) 4592 (4591 . 4592)) nil (23428 21777 352403 0) 0 nil]) ((4588 . 4590) (#("[" 0 1 (fontified t)) . -4588) (undo-tree-id463 . -1) (#("]" 0 1 (fontified t)) . -4589) (undo-tree-id464 . -1) (undo-tree-id465 . 1) (undo-tree-id466 . -1) 4590 (4586 . 4590)) nil (23428 21777 352408 0) 0 nil]) ((#("h" 0 1 (fontified t)) . -4587) (undo-tree-id467 . -1) 4588 (4582 . 4588) (#("s" 0 1 (fontified t face font-lock-string-face)) . -4582) (undo-tree-id468 . -1) (#("u" 0 1 (fontified t face font-lock-string-face)) . -4583) (undo-tree-id469 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -4584) (undo-tree-id470 . -1) 4585 (4581 . 4585) (#("s" 0 1 (fontified t face font-lock-string-face)) . -4581) (undo-tree-id471 . -1) 4582 (4581 . 4582) (4573 . 4581) (#(" " 0 1 (fontified t)) . -4573) (undo-tree-id472 . -1) (#("=" 0 1 (fontified t)) . -4574) (undo-tree-id473 . -1) 4575 (4562 . 4575) (4552 . 4562) (#("complia" 0 7 (fontified t)) . -4552) (undo-tree-id474 . -7) 4559 (4552 . 4559) (4539 . 4552) 4538) nil (23428 21777 352420 0) 0 nil]) ((4573 . 4574)) nil (23428 21777 352423 0) 0 nil]) ((4562 . 4573) (t 23428 21412 0 0)) nil (23428 21777 352425 0) 0 nil]) ((4538 . 4539)) nil (23428 21412 742139 0) 0 nil]) ((4520 . 4538) (4507 . 4520) (t 23428 21361 0 0) 4484) nil (23428 21412 742143 0) 0 nil]) ((4278 . 4280) (#("data" 0 4 (fontified t)) . 4278) (t 23428 21326 0 0)) nil (23428 21361 710916 0) 0 nil]) ((4589 . 4593) (#("c" 0 1 (fontified t)) . -4589) (undo-tree-id452 . -1) (#("n" 0 1 (fontified t)) . -4590) (undo-tree-id453 . -1) 4591 (4576 . 4591) (#("    " 0 4 (fontified t)) . -4576) (undo-tree-id454 . -4) 4580 (#("    " 0 4 (fontified t)) . -4580) (undo-tree-id455 . -4) 4584 (4571 . 4584) (t 23428 21318 0 0) 4528) nil (23428 21326 702707 0) 0 nil]) ((4538 . 4543)) nil (23428 21318 750069 0) 0 nil]) ((#("URL" 0 3 (fontified t face font-lock-string-face)) . 4538)) nil (23428 21318 750074 0) 0 nil] [nil nil ((#("]" 0 1 (fontified t)) . 4543) (undo-tree-id441 . 1) (undo-tree-id442 . 1) (undo-tree-id443 . -1)) ((4543 . 4544)) (23428 21272 153342 0) 0 nil]) ((4533 . 4543) (#("url" 0 3 (fontified t)) . 4533)) nil (23428 21272 153585 0) 0 nil]) ((4496 . 4505) (#("w" 0 1 (fontified t)) . -4496) (undo-tree-id444 . -1) 4497 (4495 . 4497) (#("location" 0 8 (fontified t)) . 4495)) nil (23428 21272 153350 0) 0 nil]) ((4311 . 4314) (#("url" 0 3 (fontified t face font-lock-string-face)) . 4311)) nil (23428 21272 153353 0) 0 nil]) ((4313 . 4314)) nil (23428 21272 153354 0) 0 nil]) ((4311 . 4313) (#("r" 0 1 (fontified t face font-lock-string-face)) . -4311) (undo-tree-id445 . -1) 4312 (4311 . 4312) (#("loh" 0 3 (fontified t face font-lock-string-face)) . 4311)) nil (23428 21272 153356 0) 0 nil]) ((4313 . 4314) (#("cation" 0 6 (fontified t face font-lock-string-face)) . 4313)) nil (23428 21272 153358 0) 0 nil]) ((4319 . 4321)) nil (23428 21272 153360 0) 0 nil]) ((4306 . 4311)) nil (23428 21272 153361 0) 0 nil]) ((#(" " 0 1 (fontified t)) . 4271)) nil (23428 21272 153361 0) 0 nil]) ((#("r" 0 1 (fontified t)) . 4271)) nil (23428 21272 153362 0) 0 nil]) ((#("i" 0 1 (fontified t)) . 4293)) nil (23428 21272 153364 0) 0 nil]) ((4293 . 4296) (4285 . 4293) (#("iterro" 0 6 (fontified t)) . -4285) (undo-tree-id446 . -6) 4291 (4280 . 4291) (#("urls" 0 4 (fontified t)) . 4280)) nil (23428 21272 153367 0) 0 nil]) ((4272 . 4276) (#("o" 0 1 (fontified t)) . -4272) (undo-tree-id447 . -1) 4273 (4265 . 4273) (#("location" 0 8 (fontified t)) . 4265)) nil (23428 21272 153370 0) 0 nil]) ((#("
" 0 1 (fontified t)) . 6805) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1)) nil (23428 21272 153374 0) 0 nil]) ((4218 . 4220) (#("ids, urls" 0 5 (fontified t) 5 9 (fontified t)) . 4218) (undo-tree-id451 . -5) 4223) nil (23428 21272 153377 0) 0 nil]) ((2581 . 2583) (#("issue_id, urls" 0 10 (fontified t) 10 13 (fontified t) 13 14 (fontified t)) . 2581) (t 23428 20980 0 0)) nil (23428 21272 153379 0) 0 nil]) ((2560 . 2597) (#("    check_compliance(issue_id, urls)
" 0 21 (fontified t) 21 31 (fontified t) 31 34 (fontified t) 34 37 (fontified t)) . 2521) (undo-tree-id431 . -37) (undo-tree-id432 . -37) (undo-tree-id433 . -7) 2528) nil (23428 20980 26740 0) 0 nil]) ((2521 . 2558) (#("    check_compliance(issue_id, urls)
" 0 21 (fontified t) 21 31 (fontified t) 31 34 (fontified t) 34 37 (fontified t)) . 2409) (undo-tree-id434 . -37) (undo-tree-id435 . -37) (undo-tree-id436 . -7) 2416) nil (23428 20980 26746 0) 0 nil]) ((2409 . 2446) (#("    check_compliance(issue_id, urls)
" 0 21 (fontified t) 21 31 (fontified t) 31 34 (fontified t) 34 37 (fontified t)) . 2252) (undo-tree-id437 . -37) (undo-tree-id438 . -37) (undo-tree-id439 . -21) (undo-tree-id440 . -7) 2259 (t 23428 15854 0 0)) nil (23428 20980 26752 0) 0 nil] [nil nil ((398 . 400) (t 23428 15854 0 0)) ((#("jj" 0 2 (fontified t face font-lock-variable-name-face)) . 398) (undo-tree-id430 . -1)) (23428 20932 871048 0) 0 nil]) ((4577 . 4587) (#("True" 0 4 (fontified t face font-lock-constant-face)) . 4577) (undo-tree-id398 . -4) (undo-tree-id399 . -4) (undo-tree-id400 . -4) (undo-tree-id401 . -4) (undo-tree-id402 . -4) (undo-tree-id403 . -4) (undo-tree-id404 . -4) (undo-tree-id405 . -4) (undo-tree-id406 . -4) (undo-tree-id407 . -4) (undo-tree-id408 . -4) (undo-tree-id409 . -4)) nil (23428 20932 871785 0) 0 nil]) ((#("            print(cmd)
" 0 12 (fontified t) 12 17 (fontified t face font-lock-keyword-face) 17 22 (fontified t) 22 23 (fontified t)) . 4566) (undo-tree-id410 . -23) (undo-tree-id411 . -23) (undo-tree-id412 . -23) (undo-tree-id413 . -23) (undo-tree-id414 . -23) (undo-tree-id415 . -23) (undo-tree-id416 . -23) (undo-tree-id417 . -23) (undo-tree-id418 . -23) (undo-tree-id419 . -23) (undo-tree-id420 . -23) (undo-tree-id421 . -23) (undo-tree-id422 . -23) (undo-tree-id423 . -1) (undo-tree-id424 . -4) (undo-tree-id425 . -5) (undo-tree-id426 . -8) (undo-tree-id427 . -9) (undo-tree-id428 . -12) (undo-tree-id429 . -22) 4578 (t 23428 15845 0 0)) nil (23428 15854 658458 0) 0 nil]) ((4540 . 4543)) nil (23428 15845 759857 0) 0 nil]) ((#("l" 0 1 (fontified t)) . -4543) (undo-tree-id387 . -1) 4544 (4543 . 4544) (4536 . 4543) (#("i" 0 1 (fontified t)) . -4536) (undo-tree-id388 . -1) (#("d" 0 1 (fontified t)) . -4537) (undo-tree-id389 . -1) 4538 (4525 . 4538)) nil (23428 15845 759869 0) 0 nil]) ((4535 . 4544) (#("i" 0 1 (fontified t)) . -4535) (undo-tree-id390 . -1) (#("f" 0 1 (fontified t)) . -4536) (undo-tree-id391 . -1) (#("l" 0 1 (fontified t)) . -4537) (undo-tree-id392 . -1) (#("e" 0 1 (fontified t)) . -4538) (undo-tree-id393 . -1) (#("(" 0 1 (fontified t)) . -4539) (undo-tree-id394 . -1) 4540 (4525 . 4540) (4512 . 4525) 4481) nil (23428 15845 759879 0) 0 nil]) ((#("            cmd = f\"{line} {loc}\"
" 0 12 (fontified t) 12 15 (fontified t face font-lock-variable-name-face) 15 19 (fontified t) 19 20 (syntax-table #1# fontified t face font-lock-string-face) 20 32 (fontified t face font-lock-string-face) 32 33 (syntax-table #1# fontified t face font-lock-string-face) 33 34 (fontified t)) . 4513) (undo-tree-id395 . -34) (undo-tree-id396 . -34) (undo-tree-id397 . -19) 4532 (t 23428 15643 0 0)) nil (23428 15845 759884 0) 0 nil]) ((4343 . 4351) (4330 . 4343) (4310 . 4330) (4301 . 4310) (t 23428 15632 0 0) 4300) nil (23428 15643 874282 0) 0 nil]) ((#("/" 0 1 (fontified t face font-lock-string-face)) . 4361)) nil (23428 15632 511648 0) 0 nil] [nil nil ((#("c" 0 1 (fontified t face font-lock-string-face)) . 4362)) ((4362 . 4363)) (23428 15630 565986 0) 0 nil]) ((#("/" 0 1 (fontified t face font-lock-string-face)) . 4347)) nil (23428 15630 566452 0) 0 nil]) ((#("/" 0 1 (fontified t face font-lock-string-face)) . 4338)) nil (23428 15630 565993 0) 0 nil]) ((#("/" 0 1 (fontified t face font-lock-string-face)) . 4328)) nil (23428 15630 565994 0) 0 nil]) ((#("/" 0 1 (fontified t face font-lock-string-face)) . 4320)) nil (23428 15630 565995 0) 0 nil]) ((#("
" 0 1 (fontified t)) . 4424) (undo-tree-id383 . 1) (undo-tree-id384 . -1) (undo-tree-id385 . -1)) nil (23428 15630 566009 0) 0 nil]) ((#("            " 0 12 (fontified t)) . -4424) (undo-tree-id386 . -12) 4436 (4423 . 4436) (t 23428 15467 0 0) 4422) nil (23428 15630 566015 0) 0 nil]) ((4498 . 4499)) nil (23428 15467 629752 0) 0 nil]) ((#("c" 0 1 (fontified t face font-lock-string-face)) . 4497)) nil (23428 15467 629755 0) 0 nil]) ((#("l" 0 1 (fontified t face font-lock-string-face)) . 4497)) nil (23428 15467 629757 0) 0 nil]) ((4497 . 4500) (#("ocationf" 0 8 (fontified t face font-lock-string-face)) . 4497)) nil (23428 15467 629760 0) 0 nil]) ((#("{" 0 1 (fontified t face font-lock-string-face)) . 4504) (undo-tree-id380 . 1)) nil (23428 15467 629764 0) 0 nil]) ((#("}" 0 1 (fontified t face font-lock-string-face)) . 4504) (undo-tree-id381 . 1) (undo-tree-id382 . -1) (t 23428 15456 0 0)) nil (23428 15467 629768 0) 0 nil]) ((4449 . 4467) (4436 . 4449) (#("c" 0 1 (fontified t)) . -4436) (undo-tree-id377 . -1) (#("m" 0 1 (fontified t)) . -4437) (undo-tree-id378 . -1) (#("d" 0 1 (fontified t)) . -4438) (undo-tree-id379 . -1) 4439 (4436 . 4439) (4423 . 4436) (t 23428 15376 0 0) 4422) nil (23428 15456 132309 0) 0 nil]) ((#("w" 0 1 (fontified t face font-lock-string-face)) . 4366)) nil (23428 15376 52043 0) 0 nil]) ((4365 . 4367)) nil (23428 15376 52047 0) 0 nil]) ((4350 . 4351)) nil (23428 15376 52049 0) 0 nil]) ((4340 . 4341)) nil (23428 15376 52050 0) 0 nil]) ((4329 . 4330)) nil (23428 15376 52051 0) 0 nil]) ((4320 . 4321) (t 23428 14110 0 0)) nil (23428 15376 52052 0) 0 nil]) ((#("
" 0 1 (fontified t)) . 4484) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . 1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1)) nil (23428 14109 924954 0) 0 nil]) ((#("
" 0 1 (fontified t)) . 4484) (undo-tree-id274 . -1) (undo-tree-id275 . -1)) nil (23428 14109 924959 0) 0 nil]) ((#("            " 0 12 (fontified t)) . -4485) (undo-tree-id276 . -12) 4497 (4484 . 4497) 4484) nil (23428 14109 924962 0) 0 nil]) ((#("
" 0 1 (fontified t)) . 4485) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1)) nil (23428 14109 924971 0) 0 nil]) ((#("        " 0 8 (fontified nil)) . -4473) (4461 . 4473) 4478) nil (23428 14109 924972 0) 0 nil]) ((4475 . 4479) (#("l" 0 1 (fontified t)) . -4475) (undo-tree-id287 . -1) (#("i" 0 1 (fontified t)) . -4476) (undo-tree-id288 . -1) 4477 (4474 . 4477)) nil (23428 14109 924976 0) 0 nil]) ((#("            " 0 12 (fontified nil)) . -4469) (undo-tree-id289 . -12) (4461 . 4469) 4473) nil (23428 14109 924979 0) 0 nil]) ((4473 . 4478) (4461 . 4473) (nil face font-lock-string-face 4460 . 4461) (nil fontified t 4460 . 4461) (4460 . 4461) 4419) nil (23428 14109 924981 0) 0 nil]) ((#("            " 0 12 (fontified t)) . -4462) (undo-tree-id290 . -12) 4474 (4461 . 4474) 4461) nil (23428 14109 924984 0) 0 nil]) ((4448 . 4455) (#("ine" 0 3 (fontified t face font-lock-string-face)) . 4448)) nil (23428 14109 924985 0) 0 nil]) ((4447 . 4451)) nil (23428 14109 924986 0) 0 nil]) ((4451 . 4452)) nil (23428 14109 924987 0) 0 nil]) ((4446 . 4448)) nil (23428 14109 924988 0) 0 nil]) ((4446 . 4449) (#("file" 0 4 (fontified t face font-lock-string-face)) . 4446)) nil (23428 14109 924989 0) 0 nil]) ((#("e" 0 1 (fontified t)) . 4408)) nil (23428 14109 924990 0) 0 nil]) ((#("l" 0 1 (fontified t)) . 4408)) nil (23428 14109 924991 0) 0 nil]) ((#("i" 0 1 (fontified t face font-lock-builtin-face)) . 4408)) nil (23428 14109 924992 0) 0 nil]) ((4449 . 4453) (4442 . 4449) (#("l" 0 1 (fontified t face font-lock-string-face)) . -4442) (undo-tree-id291 . -1) (#("i" 0 1 (fontified t face font-lock-string-face)) . -4443) (undo-tree-id292 . -1) (#("n" 0 1 (fontified t face font-lock-string-face)) . -4444) (undo-tree-id293 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -4445) (undo-tree-id294 . -1) 4446 (4440 . 4446) (#("l" 0 1 (fontified t)) . -4440) (undo-tree-id295 . -1) 4441 (4434 . 4441) (4422 . 4434) (#(" " 0 1 (fontified nil)) . 4422) (4421 . 4422) (4420 . 4421) (4409 . 4420) (#("e" 0 1 (fontified t)) . -4409) (undo-tree-id296 . -1) (#("l" 0 1 (fontified t)) . -4410) (undo-tree-id297 . -1) 4411 (4407 . 4411) (#("line" 0 4 (fontified t)) . 4407)) nil (23428 14109 925006 0) 0 nil]) ((#("        code_folder = f\"{location}code/\"
" 0 7 (fontified t) 7 8 (rear-nonsticky t fontified t) 8 12 (fontified t face font-lock-variable-name-face) 12 19 (fontified t face font-lock-variable-name-face) 19 23 (fontified t) 23 24 (fontified t syntax-table #1# face font-lock-string-face) 24 38 (fontified t face font-lock-string-face) 38 39 (fontified t face font-lock-string-face) 39 40 (fontified t syntax-table #1# face font-lock-string-face) 40 41 (fontified t)) . 4369) (undo-tree-id298 . -40) (undo-tree-id299 . -41) (undo-tree-id300 . -41) (undo-tree-id301 . -40) (undo-tree-id302 . -13) (undo-tree-id303 . -37) (undo-tree-id304 . -8) (undo-tree-id305 . -13) 4377) nil (23428 14109 925015 0) 0 nil]) ((#("        manifests_folder = f\"{location}manifests/\"
" 0 7 (fontified t) 7 8 (rear-nonsticky t fontified t) 8 17 (fontified t face font-lock-variable-name-face) 17 24 (fontified t face font-lock-variable-name-face) 24 28 (fontified t) 28 29 (fontified t syntax-table #1# face font-lock-string-face) 29 47 (fontified t face font-lock-string-face) 47 49 (fontified t face font-lock-string-face) 49 50 (fontified t syntax-table #1# face font-lock-string-face) 50 51 (fontified t)) . 4369) (undo-tree-id306 . -51) (undo-tree-id307 . -51) (undo-tree-id308 . -51) (undo-tree-id309 . -8) 4377) nil (23428 14109 925020 0) 0 nil]) ((#("        data_folder = f\"{location}data/\"
" 0 8 (fontified t) 8 19 (fontified t face font-lock-variable-name-face) 19 23 (fontified t) 23 24 (fontified t syntax-table #1# face font-lock-string-face) 24 39 (fontified t face font-lock-string-face) 39 40 (fontified t syntax-table #1# face font-lock-string-face) 40 41 (fontified t)) . 4369) (undo-tree-id310 . -41) (undo-tree-id311 . -41) (undo-tree-id312 . -41) (undo-tree-id313 . -8) 4377) nil (23428 14109 925025 0) 0 nil]) ((#("        readme_file = f\"{location}README\"
" 0 8 (fontified t) 8 19 (fontified t face font-lock-variable-name-face) 19 23 (fontified t) 23 24 (fontified t syntax-table #1# face font-lock-string-face) 24 40 (fontified t face font-lock-string-face) 40 41 (fontified t syntax-table #1# face font-lock-string-face) 41 42 (fontified t)) . 4369) (undo-tree-id314 . -42) (undo-tree-id315 . -42) (undo-tree-id316 . -8) 4377) nil (23428 14109 925029 0) 0 nil]) ((#("        git_file = f\"{location}.git\"
" 0 8 (fontified t) 8 16 (fontified t face font-lock-variable-name-face) 16 20 (fontified t) 20 21 (syntax-table #1# fontified t face font-lock-string-face) 21 35 (fontified t face font-lock-string-face) 35 36 (syntax-table #1# fontified t face font-lock-string-face) 36 37 (fontified t)) . 4369) (undo-tree-id317 . -37) (undo-tree-id318 . -37) (undo-tree-id319 . -35) 4404) nil (23428 14109 925032 0) 0 nil]) ((4361 . 4366)) nil (23428 14109 925033 0) 0 nil]) ((4342 . 4343)) nil (23428 14109 925034 0) 0 nil]) ((4355 . 4356)) nil (23428 14109 925035 0) 0 nil]) ((#("l" 0 1 (fontified t face font-lock-string-face)) . -4355) (undo-tree-id320 . -1) (#("l" 0 1 (fontified t face font-lock-string-face)) . -4356) (undo-tree-id321 . -1) (#("l" 0 1 (fontified t face font-lock-string-face)) . -4357) (undo-tree-id322 . -1) 4358 (4355 . 4358) (nil fontified nil 4346 . 4355) (nil face font-lock-string-face 4346 . 4355) (4346 . 4355) (#("manife" 0 6 (fontified t face font-lock-string-face)) . -4346) (undo-tree-id323 . -6) 4352 (4346 . 4352)) nil (23428 14109 925042 0) 0 nil]) ((4338 . 4342)) nil (23428 14109 925044 0) 0 nil]) ((4330 . 4334) (#("D" 0 1 (fontified t face font-lock-string-face)) . -4330) (undo-tree-id324 . -1) (#("M" 0 1 (fontified t face font-lock-string-face)) . -4331) (undo-tree-id325 . -1) (#("E" 0 1 (fontified t face font-lock-string-face)) . -4332) (undo-tree-id326 . -1) 4333 (4328 . 4333)) nil (23428 14109 925048 0) 0 nil]) ((4333 . 4342) (#(" " 0 1 (fontified t)) . -4333) (undo-tree-id327 . -1) 4334 (4324 . 4334) (#("/" 0 1 (fontified t face font-lock-string-face)) . -4324) (undo-tree-id328 . -1) 4325 (4320 . 4325) (4312 . 4320) (#("e" 0 1 (fontified t)) . -4312) (undo-tree-id329 . -1) (#("l" 0 1 (fontified t)) . -4313) (undo-tree-id330 . -1) (#("s" 0 1 (fontified t)) . -4314) (undo-tree-id331 . -1) (#(" " 0 1 (fontified t)) . -4315) (undo-tree-id332 . -1) 4316 (4310 . 4316) (#("c" 0 1 (fontified t)) . -4310) (undo-tree-id333 . -1) (#("o" 0 1 (fontified t)) . -4311) (undo-tree-id334 . -1) (#("m" 0 1 (fontified t)) . -4312) (undo-tree-id335 . -1) 4313 (4310 . 4313) (4301 . 4310) 4292) nil (23428 14109 925062 0) 0 nil]) ((#("    outF = open(\"compliance.sh\", \"w\")
    outF.writelines(cmd)
    outF.close()
    os.system('./setup.sh')
    with open(\"compliance_output.txt\", \"r\") as outR:
        print(outR.read())
" 0 4 (fontified t) 4 8 (fontified t face font-lock-variable-name-face) 8 11 (fontified t) 11 15 (fontified t face font-lock-builtin-face) 15 16 (fontified t) 16 17 (syntax-table #1# fontified t face font-lock-string-face) 17 30 (fontified t face font-lock-string-face) 30 31 (syntax-table #1# fontified t face font-lock-string-face) 31 33 (fontified t) 33 34 (syntax-table #1# fontified t face font-lock-string-face) 34 35 (fontified t face font-lock-string-face) 35 36 (syntax-table #1# fontified t face font-lock-string-face) 36 80 (fontified t) 80 94 (fontified t) 94 95 (syntax-table #1# fontified t face font-lock-string-face) 95 105 (fontified t face font-lock-string-face) 105 106 (syntax-table #1# fontified t face font-lock-string-face) 106 107 (fontified t) 107 108 (fontified t) 108 111 (fontified t) 111 112 (rear-nonsticky t fontified t) 112 113 (fontified t face font-lock-keyword-face) 113 116 (fontified t face font-lock-keyword-face) 116 117 (fontified t) 117 121 (fontified t face font-lock-builtin-face) 121 122 (fontified t) 122 123 (syntax-table #1# fontified t face font-lock-string-face) 123 144 (fontified t face font-lock-string-face) 144 145 (syntax-table #1# fontified t face font-lock-string-face) 145 147 (fontified t) 147 148 (syntax-table #1# fontified t face font-lock-string-face) 148 149 (fontified t face font-lock-string-face) 149 150 (syntax-table #1# fontified t face font-lock-string-face) 150 152 (fontified t) 152 154 (fontified t face font-lock-keyword-face) 154 155 (fontified t) 155 158 (fontified t) 158 159 (fontified t) 159 160 (fontified t) 160 161 (fontified t) 161 168 (fontified t) 168 169 (rear-nonsticky t fontified t) 169 174 (fontified t face font-lock-keyword-face) 174 187 (fontified t) 187 188 (fontified t)) . 4559) (undo-tree-id336 . -161) (undo-tree-id337 . -161) (undo-tree-id338 . -116) (undo-tree-id339 . -169) (undo-tree-id340 . -94) (undo-tree-id341 . -94) (undo-tree-id342 . -188) (undo-tree-id343 . -188) (undo-tree-id344 . -161) (undo-tree-id345 . -161) (undo-tree-id346 . -108) (undo-tree-id347 . -108) (undo-tree-id348 . -80) (undo-tree-id349 . -80) (undo-tree-id350 . -63) (undo-tree-id351 . -63) (undo-tree-id352 . -38) (undo-tree-id353 . -38) (undo-tree-id354 . -161) (undo-tree-id355 . -161) 4720) nil (23428 14109 925079 0) 0 nil]) ((#("        if location is not None:
            print(location)
            line = line.replace('<location>', location)
            cmd = \"%s\\n%s\" % (cmd, line)
" 0 8 (fontified t) 8 10 (fontified t face font-lock-keyword-face) 10 20 (fontified t) 20 22 (fontified t face font-lock-keyword-face) 22 23 (fontified t) 23 26 (fontified t face font-lock-keyword-face) 26 27 (fontified t) 27 31 (fontified t face font-lock-constant-face) 31 45 (fontified t) 45 50 (fontified t face font-lock-keyword-face) 50 73 (fontified t) 73 77 (fontified t face font-lock-variable-name-face) 77 83 (fontified t) 83 93 (fontified t) 93 94 (syntax-table #1# fontified t face font-lock-string-face) 94 104 (fontified t face font-lock-string-face) 104 105 (syntax-table #1# fontified t face font-lock-string-face) 105 106 (fontified t) 106 117 (fontified t) 117 129 (fontified t) 129 132 (fontified t face font-lock-variable-name-face) 132 135 (fontified t) 135 136 (syntax-table #1# fontified t face font-lock-string-face) 136 142 (fontified t face font-lock-string-face) 142 143 (syntax-table #1# fontified t face font-lock-string-face) 143 158 (fontified t)) . 4558) (undo-tree-id356 . -133) (undo-tree-id357 . -16) (undo-tree-id358 . -133) (undo-tree-id359 . -33) (undo-tree-id360 . -33) (undo-tree-id361 . -61) (undo-tree-id362 . -61) (undo-tree-id363 . -117) (undo-tree-id364 . -117) (undo-tree-id365 . -158) (undo-tree-id366 . -158) (undo-tree-id367 . -133) (undo-tree-id368 . -58) (undo-tree-id369 . -58) (undo-tree-id370 . -16) (undo-tree-id371 . -133) 4691) nil (23428 14109 925091 0) 0 nil]) ((4548 . 4557) (4539 . 4548) 4537) nil (23428 14109 925093 0) 0 nil]) ((4537 . 4538) (#("\"" 0 1 (fontified t face font-lock-string-face)) . 4537)) nil (23428 14109 925095 0) 0 nil]) ((4537 . 4538)) nil (23428 14109 925096 0) 0 nil]) ((#("<location> \\( -name \"README\" -o -name \".git\" -type f -o -name \"code\" -o -name \"manifests\" -o -name \"data\" -type d \\)'" 0 20 (fontified t face font-lock-string-face) 20 21 (fontified t face font-lock-string-face) 21 27 (fontified t face font-lock-string-face) 27 28 (fontified t face font-lock-string-face) 28 38 (fontified t face font-lock-string-face) 38 39 (fontified t face font-lock-string-face) 39 43 (fontified t face font-lock-string-face) 43 44 (fontified t face font-lock-string-face) 44 62 (fontified t face font-lock-string-face) 62 63 (fontified t face font-lock-string-face) 63 67 (fontified t face font-lock-string-face) 67 68 (fontified t face font-lock-string-face) 68 78 (fontified t face font-lock-string-face) 78 79 (fontified t face font-lock-string-face) 79 88 (fontified t face font-lock-string-face) 88 89 (fontified t face font-lock-string-face) 89 99 (fontified t face font-lock-string-face) 99 100 (fontified t face font-lock-string-face) 100 104 (fontified t face font-lock-string-face) 104 105 (fontified t face font-lock-string-face) 105 116 (fontified t face font-lock-string-face) 116 117 (fontified t syntax-table #1# face font-lock-string-face)) . 4538)) nil (23428 14109 925097 0) 0 nil]) ((4531 . 4534) (#("ouch" 0 4 (fontified t face font-lock-string-face)) . 4531)) nil (23428 14109 925098 0) 0 nil]) ((4257 . 4262) (4247 . 4257) (#("compli" 0 6 (fontified t)) . -4247) (undo-tree-id372 . -6) 4253 (4247 . 4253) (#("d" 0 1 (fontified t)) . -4247) (undo-tree-id373 . -1) (#("a" 0 1 (fontified t)) . -4248) (undo-tree-id374 . -1) 4249 (4247 . 4249) (4242 . 4247) 4242) nil (23428 14109 925110 0) 0 nil]) ((4234 . 4235)) nil (23428 14109 925111 0) 0 nil]) ((4233 . 4234) (#(" " 0 1 (fontified t)) . -4233) (undo-tree-id375 . -1) 4234 (4230 . 4234) (#(" " 0 1 (fontified t)) . -4230) (undo-tree-id376 . -1) 4231 (4230 . 4231)) nil (23428 14109 925116 0) 0 nil] [nil nil ((#("urls" 0 4 (fontified t)) . 4230)) ((4230 . 4234)) (23428 13906 815224 0) 0 nil] [nil nil ((#("ts" 0 2 (fontified t face font-lock-string-face)) . 2588)) ((2588 . 2590)) (23428 13889 186951 0) 0 nil]) ((2281 . 2283) (2273 . 2281) (#("issue" 0 5 (fontified t)) . -2273) (undo-tree-id261 . -5) (undo-tree-id262 . 5) 2278 (2273 . 2278) (t 23428 13813 0 0)) nil (23428 13906 815324 0) 0 nil]) ((4472 . 4476) (#("manifests" 0 8 (fontified t face font-lock-string-face) 8 9 (fontified t face font-lock-string-face)) . 4472)) nil (23428 13813 99234 0) 0 nil]) ((4446 . 4450) (#("d" 0 1 (fontified t face font-lock-variable-name-face)) . -4446) (undo-tree-id256 . -1) (#("a" 0 1 (fontified t face font-lock-variable-name-face)) . -4447) (undo-tree-id257 . -1) (#("t" 0 1 (fontified t face font-lock-variable-name-face)) . -4448) (undo-tree-id258 . -1) (#("a" 0 1 (fontified t face font-lock-variable-name-face)) . -4449) (undo-tree-id259 . -1) 4450 (4446 . 4450) (#("a" 0 1 (fontified t face font-lock-variable-name-face)) . -4446) (undo-tree-id260 . -1) 4447 (4446 . 4447) (#("manifests" 0 9 (fontified t face font-lock-variable-name-face)) . 4446)) nil (23428 13813 99247 0) 0 nil]) ((#("
" 0 1 (fontified nil)) . -4488) (4438 . 4489) (nil face font-lock-string-face 4437 . 4438) (nil fontified t 4437 . 4438) (4437 . 4438) 4387) nil (23428 13813 99251 0) 0 nil] [nil nil ((nil rear-nonsticky nil 4390 . 4391) (nil fontified nil 4387 . 4391) (4387 . 4391) 4438 (#("        manifests_folder = f\"{location}manifests/\"
" 0 7 (fontified t) 7 8 (fontified t rear-nonsticky t) 8 17 (fontified t face font-lock-variable-name-face) 17 24 (fontified t face font-lock-variable-name-face) 24 28 (fontified t) 28 29 (fontified t syntax-table #1# face font-lock-string-face) 29 47 (fontified t face font-lock-string-face) 47 49 (fontified t face font-lock-string-face) 49 50 (fontified t syntax-table #1# face font-lock-string-face) 50 51 (fontified t)) . 4387) (undo-tree-id133 . -51) (undo-tree-id134 . -46) (undo-tree-id135 . -46) (undo-tree-id136 . -47) (undo-tree-id137 . -47) (undo-tree-id138 . 3) (undo-tree-id139 . -51) (undo-tree-id140 . -51) (undo-tree-id141 . -46) (undo-tree-id142 . -51) (undo-tree-id143 . -51) (undo-tree-id144 . -51) (undo-tree-id145 . -51) (undo-tree-id146 . -51) (undo-tree-id147 . -51) (undo-tree-id148 . -51) (undo-tree-id149 . -51) (undo-tree-id150 . -51) (undo-tree-id151 . -51) (undo-tree-id152 . -51) (undo-tree-id153 . -51) (undo-tree-id154 . -51) (undo-tree-id155 . -51) (undo-tree-id156 . -51) (undo-tree-id157 . -1) (undo-tree-id158 . -4) (undo-tree-id159 . -5) (undo-tree-id160 . -1) (undo-tree-id161 . -4) (undo-tree-id162 . -5) (undo-tree-id163 . -1) (undo-tree-id164 . -4) (undo-tree-id165 . -5) (undo-tree-id166 . -1) (undo-tree-id167 . -4) (undo-tree-id168 . -5) (undo-tree-id169 . -1) (undo-tree-id170 . -4) (undo-tree-id171 . -5) (undo-tree-id172 . -1) (undo-tree-id173 . -4) (undo-tree-id174 . -5) (undo-tree-id175 . -1) (undo-tree-id176 . -4) (undo-tree-id177 . -5) (undo-tree-id178 . -1) (undo-tree-id179 . -4) (undo-tree-id180 . -5) (undo-tree-id181 . -1) (undo-tree-id182 . -4) (undo-tree-id183 . -5) (undo-tree-id184 . -1) (undo-tree-id185 . -4) (undo-tree-id186 . -5) (undo-tree-id187 . -1) (undo-tree-id188 . -4) (undo-tree-id189 . -5) (undo-tree-id190 . -8) (undo-tree-id191 . -1) (undo-tree-id192 . -4) (undo-tree-id193 . -5) (undo-tree-id194 . -1) (undo-tree-id195 . -4) (undo-tree-id196 . -5) (undo-tree-id197 . -1) (undo-tree-id198 . -4) (undo-tree-id199 . -5) (undo-tree-id200 . -1) (undo-tree-id201 . -4) (undo-tree-id202 . -5) (undo-tree-id203 . -1) (undo-tree-id204 . -4) (undo-tree-id205 . -5) (undo-tree-id206 . -1) (undo-tree-id207 . -4) (undo-tree-id208 . -5) (undo-tree-id209 . -1) (undo-tree-id210 . -4) (undo-tree-id211 . -5) (undo-tree-id212 . -1) (undo-tree-id213 . -4) (undo-tree-id214 . -5) (undo-tree-id215 . -1) (undo-tree-id216 . -4) (undo-tree-id217 . -5) (undo-tree-id218 . -1) (undo-tree-id219 . -4) (undo-tree-id220 . -5) (undo-tree-id221 . -50) (undo-tree-id222 . -50) (undo-tree-id223 . -8) (undo-tree-id224 . -8) (undo-tree-id225 . -50) (undo-tree-id226 . -50) (undo-tree-id227 . -47) (undo-tree-id228 . -1) (undo-tree-id229 . -4) (undo-tree-id230 . -5) (undo-tree-id231 . -1) (undo-tree-id232 . -4) (undo-tree-id233 . -5) (undo-tree-id234 . -1) (undo-tree-id235 . -4) (undo-tree-id236 . -5) (undo-tree-id237 . -8) (undo-tree-id238 . -8) (undo-tree-id239 . -27) (undo-tree-id240 . -50) (undo-tree-id241 . -1) (undo-tree-id242 . -4) (undo-tree-id243 . -5) (undo-tree-id244 . -1) (undo-tree-id245 . -4) (undo-tree-id246 . -5) (undo-tree-id247 . -8) (undo-tree-id248 . -8) (undo-tree-id249 . -27) (undo-tree-id250 . -50) (undo-tree-id251 . -51) (undo-tree-id252 . -46) (undo-tree-id253 . -46) 4438) ((4387 . 4438) (#("data" 0 3 (fontified nil) 3 4 (fontified nil rear-nonsticky nil)) . 4387) (undo-tree-id254 . -3) (undo-tree-id255 . -3) (nil rear-nonsticky t 4390 . 4391)) (23428 13800 692447 0) 0 nil] [nil nil ((nil rear-nonsticky nil 4437 . 4438) (nil fontified nil 4434 . 4438) (4434 . 4438) 4433) ((#("data" 0 3 (fontified nil face font-lock-string-face) 3 4 (fontified nil rear-nonsticky nil face font-lock-string-face)) . 4434) (undo-tree-id131 . -3) (undo-tree-id132 . -3) (nil rear-nonsticky t 4437 . 4438)) (23428 13797 744846 0) 0 nil]) ((4426 . 4435) (#("data" 0 4 (fontified t face font-lock-string-face)) . 4426)) nil (23428 13800 692927 0) 0 nil]) ((4395 . 4404) (#("manif" 0 5 (fontified t face font-lock-variable-name-face)) . -4395) (undo-tree-id82 . -5) 4400 (4395 . 4400) (#("data" 0 4 (fontified t face font-lock-variable-name-face)) . 4395)) nil (23428 13797 744858 0) 0 nil]) ((nil rear-nonsticky nil 4394 . 4395) (#("
" 0 1 (fontified nil)) . -4427) (4387 . 4428) (nil face font-lock-string-face 4386 . 4387) (nil fontified t 4386 . 4387) (4386 . 4387) 4385) nil (23428 13797 744861 0) 0 nil]) ((4379 . 4386) (#("\"" 0 1 (fontified t syntax-table #1# face font-lock-string-face)) . -4379) (undo-tree-id83 . -1) 4380 (4375 . 4380) (4354 . 4375) (4346 . 4354) (nil face font-lock-string-face 4345 . 4346) (nil fontified t 4345 . 4346) (4345 . 4346) 4344) nil (23428 13797 744866 0) 0 nil]) ((4344 . 4345)) nil (23428 13797 744867 0) 0 nil]) ((#("N" 0 1 (fontified t face font-lock-string-face)) . 4343)) nil (23428 13797 744868 0) 0 nil]) ((4341 . 4342) (#("d" 0 1 (fontified t face font-lock-string-face)) . -4341) (undo-tree-id84 . -1) 4342 (4341 . 4342)) nil (23428 13797 744871 0) 0 nil]) ((#("I" 0 1 (fontified t face font-lock-string-face)) . 4342)) nil (23428 13797 744872 0) 0 nil]) ((#("." 0 1 (fontified t face font-lock-string-face)) . 4338)) nil (23428 13797 744873 0) 0 nil]) ((#("D" 0 1 (fontified t face font-lock-string-face)) . 4342)) nil (23428 13797 744874 0) 0 nil]) ((4339 . 4347) (#("l" 0 1 (fontified t face font-lock-string-face)) . -4339) (undo-tree-id85 . -1) 4340 (4329 . 4340) (4316 . 4329) (#("m" 0 1 (fontified t)) . -4316) (undo-tree-id86 . -1) (#("e" 0 1 (fontified t)) . -4317) (undo-tree-id87 . -1) (#("e" 0 1 (fontified t)) . -4318) (undo-tree-id88 . -1) (#("_" 0 1 (fontified t)) . -4319) (undo-tree-id89 . -1) 4320 (4318 . 4320) (#("r" 0 1 (fontified t)) . -4318) (undo-tree-id90 . -1) 4319 (4314 . 4319) (#("d" 0 1 (fontified t)) . -4314) (undo-tree-id91 . -1) (#("m" 0 1 (fontified t)) . -4315) (undo-tree-id92 . -1) 4316 (4312 . 4316) (#("d" 0 1 (fontified t)) . -4312) (undo-tree-id93 . -1) (#("a" 0 1 (fontified t)) . -4313) (undo-tree-id94 . -1) (#("t" 0 1 (fontified t)) . -4314) (undo-tree-id95 . -1) (#("a" 0 1 (fontified t)) . -4315) (undo-tree-id96 . -1) 4316 (#("_" 0 1 (fontified t)) . -4316) (undo-tree-id97 . -1) (#("f" 0 1 (fontified t)) . -4317) (undo-tree-id98 . -1) (#("o" 0 1 (fontified t)) . -4318) (undo-tree-id99 . -1) (#("l" 0 1 (fontified t)) . -4319) (undo-tree-id100 . -1) (#("d" 0 1 (fontified t)) . -4320) (undo-tree-id101 . -1) (#("e" 0 1 (fontified t)) . -4321) (undo-tree-id102 . -1) (#("r" 0 1 (fontified t)) . -4322) (undo-tree-id103 . -1) 4323 (4312 . 4323) (#("g" 0 1 (fontified t)) . -4312) (undo-tree-id104 . -1) (#("i" 0 1 (fontified t)) . -4313) (undo-tree-id105 . -1) (#("t" 0 1 (fontified t)) . -4314) (undo-tree-id106 . -1) 4315 (4312 . 4315) (4304 . 4312) (nil face font-lock-string-face 4303 . 4304) (nil fontified t 4303 . 4304) (4303 . 4304) 4302) nil (23428 13797 744899 0) 0 nil]) ((4300 . 4303) (#("t" 0 1 (fontified t face font-lock-string-face)) . -4300) (undo-tree-id107 . -1) 4301 (4298 . 4301) (4288 . 4298) (#("l" 0 1 (fontified t face font-lock-string-face)) . -4288) (undo-tree-id108 . -1) (#("o" 0 1 (fontified t face font-lock-string-face)) . -4289) (undo-tree-id109 . -1) 4290 (4286 . 4290) (#("l" 0 1 (fontified t)) . -4286) (undo-tree-id110 . -1) (#("o" 0 1 (fontified t)) . -4287) (undo-tree-id111 . -1) (#("c" 0 1 (fontified t)) . -4288) (undo-tree-id112 . -1) (#("a" 0 1 (fontified t)) . -4289) (undo-tree-id113 . -1) (#("t" 0 1 (fontified t)) . -4290) (undo-tree-id114 . -1) (#("i" 0 1 (fontified t)) . -4291) (undo-tree-id115 . -1) (#("o" 0 1 (fontified t)) . -4292) (undo-tree-id116 . -1) (#("n" 0 1 (fontified t)) . -4293) (undo-tree-id117 . -1) (#(" " 0 1 (fontified t)) . -4294) (undo-tree-id118 . -1) (#("+" 0 1 (fontified t)) . -4295) (undo-tree-id119 . -1) (#(" " 0 1 (fontified t)) . -4296) (undo-tree-id120 . -1) 4297 (4278 . 4297) (#("_" 0 1 (fontified t)) . -4278) (undo-tree-id121 . -1) 4279 (4275 . 4279) (4266 . 4275) 4264) nil (23428 13797 744926 0) 0 nil]) ((4290 . 4291)) nil (23428 13797 744930 0) 0 nil]) ((#("3" 0 1 (fontified t face font-lock-string-face)) . 4290)) nil (23428 13797 744931 0) 0 nil]) ((4289 . 4292)) nil (23428 13797 744931 0) 0 nil]) ((4283 . 4288)) nil (23428 13797 744932 0) 0 nil]) ((#("d" 0 1 (fontified t face font-lock-string-face)) . 4283)) nil (23428 13797 744933 0) 0 nil]) ((#("n" 0 1 (fontified t face font-lock-string-face)) . 4283)) nil (23428 13797 744934 0) 0 nil]) ((#("i" 0 1 (fontified t face font-lock-string-face)) . 4283)) nil (23428 13797 744935 0) 0 nil]) ((#("f" 0 1 (fontified t face font-lock-string-face)) . 4283)) nil (23428 13797 744936 0) 0 nil]) ((#("    # update_wiki({'title': 'Dataset Metadata', 'text': dataset_text})
    #create_wiki({'title': 'Dataset Metadata', 'text': dataset_text})
    #print(f'Project ID: {project.id}')
    #print(f'Project Description: {project.description}')
    #print(f'Project name: {project.name}')
    #print(f'Project Homepage: {project.homepage}')
" 0 4 (fontified t) 4 6 (fontified t face font-lock-comment-delimiter-face) 6 19 (fontified t face font-lock-comment-face) 19 20 (fontified t syntax-table #1# face font-lock-comment-face) 20 25 (fontified t face font-lock-comment-face) 25 26 (fontified t syntax-table #1# face font-lock-comment-face) 26 28 (fontified t face font-lock-comment-face) 28 29 (fontified t syntax-table #1# face font-lock-comment-face) 29 33 (fontified t face font-lock-comment-face) 33 45 (face font-lock-comment-face fontified t) 45 46 (syntax-table #1# face font-lock-comment-face fontified t) 46 48 (face font-lock-comment-face fontified t) 48 49 (syntax-table #1# face font-lock-comment-face fontified t) 49 53 (face font-lock-comment-face fontified t) 53 54 (syntax-table #1# face font-lock-comment-face fontified t) 54 71 (face font-lock-comment-face fontified t) 71 75 (fontified t) 75 76 (fontified t face font-lock-comment-delimiter-face) 76 89 (fontified t face font-lock-comment-face) 89 90 (fontified t syntax-table #1# face font-lock-comment-face) 90 95 (fontified t face font-lock-comment-face) 95 96 (fontified t syntax-table #1# face font-lock-comment-face) 96 98 (fontified t face font-lock-comment-face) 98 99 (fontified t syntax-table #1# face font-lock-comment-face) 99 115 (fontified t face font-lock-comment-face) 115 116 (fontified t syntax-table #1# face font-lock-comment-face) 116 118 (fontified t face font-lock-comment-face) 118 119 (fontified t syntax-table #1# face font-lock-comment-face) 119 123 (fontified t face font-lock-comment-face) 123 124 (fontified t syntax-table #1# face font-lock-comment-face) 124 141 (fontified t face font-lock-comment-face) 141 145 (fontified t) 145 146 (fontified t face font-lock-comment-delimiter-face) 146 153 (fontified t face font-lock-comment-face) 153 154 (fontified t syntax-table #1# face font-lock-comment-face) 154 178 (fontified t face font-lock-comment-face) 178 179 (fontified t syntax-table #1# face font-lock-comment-face) 179 181 (fontified t face font-lock-comment-face) 181 185 (fontified t) 185 186 (fontified t face font-lock-comment-delimiter-face) 186 193 (fontified t face font-lock-comment-face) 193 194 (fontified t syntax-table #1# face font-lock-comment-face) 194 236 (fontified t face font-lock-comment-face) 236 237 (fontified t syntax-table #1# face font-lock-comment-face) 237 239 (fontified t face font-lock-comment-face) 239 243 (fontified t) 243 244 (fontified t face font-lock-comment-delimiter-face) 244 251 (fontified t face font-lock-comment-face) 251 252 (fontified t syntax-table #1# face font-lock-comment-face) 252 280 (fontified t face font-lock-comment-face) 280 281 (fontified t syntax-table #1# face font-lock-comment-face) 281 283 (fontified t face font-lock-comment-face) 283 287 (fontified t) 287 288 (fontified t face font-lock-comment-delimiter-face) 288 295 (fontified t face font-lock-comment-face) 295 296 (fontified t syntax-table #1# face font-lock-comment-face) 296 332 (fontified t face font-lock-comment-face) 332 333 (fontified t syntax-table #1# face font-lock-comment-face) 333 335 (fontified t face font-lock-comment-face)) . 7006) (undo-tree-id122 . -306) (undo-tree-id123 . -306) (undo-tree-id124 . -23) (undo-tree-id125 . -7) (undo-tree-id126 . -7) (undo-tree-id127 . -7) (undo-tree-id128 . -23) (undo-tree-id129 . -23) (undo-tree-id130 . -306) 7029 (t 23428 817 0 0)) nil (23428 13797 744943 0) 0 nil] [nil nil ((#("import pandas as pd
" 0 6 (fontified t face font-lock-keyword-face) 6 14 (fontified t) 14 16 (fontified t face font-lock-keyword-face) 16 20 (fontified t)) . 164) (undo-tree-id74 . -7) (undo-tree-id75 . -20) (undo-tree-id76 . -20) (undo-tree-id77 . -7) (undo-tree-id78 . -7) (undo-tree-id79 . -7) (undo-tree-id80 . -7) (undo-tree-id81 . -7) 171 (t 23428 817 0 0)) ((164 . 184)) (23428 3985 925060 0) 0 nil] [nil ([nil nil ((nil rear-nonsticky nil 281 . 282) (nil fontified nil 212 . 282) (212 . 282) 211) ((#("source /proj/relibs/relib00/python/3.6.3_x86_64_CentOS6.8/bin/activate" 0 58 (fontified nil) 58 61 (fontified nil face font-lock-builtin-face) 61 69 (fontified nil) 69 70 (fontified nil rear-nonsticky nil)) . 212) (undo-tree-id60 . -69) (undo-tree-id61 . -1) (undo-tree-id62 . -69) (undo-tree-id63 . -69) (undo-tree-id64 . -69) (undo-tree-id65 . -69) (nil rear-nonsticky t 281 . 282)) (23428 3970 455999 0) 0 nil]) ((#("R" 0 1 (fontified t)) . -212) 213 (206 . 213) (t 23428 817 0 0)) ((#("READMER" 0 6 (fontified nil) 6 7 (fontified nil)) . 206) (undo-tree-id66 . -6) (undo-tree-id67 . -6) (undo-tree-id68 . -5) (undo-tree-id69 . -6) (undo-tree-id70 . -6) (undo-tree-id71 . -6) (undo-tree-id72 . -6) (undo-tree-id73 . -6) (212 . 213)) (23428 3970 456131 0) 0 nil]) ((#("        lineArr=outR.read().split('\\n')
" 0 8 (fontified t) 8 15 (fontified t face font-lock-variable-name-face) 15 34 (fontified t) 34 35 (fontified t syntax-table #1# face font-lock-string-face) 35 37 (fontified t face font-lock-string-face) 37 38 (fontified t syntax-table #1# face font-lock-string-face) 38 39 (fontified t rear-nonsticky t) 39 40 (fontified t)) . 4726) (undo-tree-id55 . -40) (undo-tree-id56 . 20) (undo-tree-id57 . -40) (undo-tree-id58 . -40) (undo-tree-id59 . -8) 4734 (t 23428 630 0 0)) nil (23428 3985 925638 0) 0 nil]) ((4742 . 4746)) nil (23428 630 890364 0) 0 nil]) ((#("f" 0 1 (fontified t)) . 4742) (t 23428 228 0 0)) nil (23428 630 890368 0) 0 nil]) ((4781 . 4788) (#("r" 0 1 (fontified t)) . -4781) (undo-tree-id47 . -1) (#("e" 0 1 (fontified t)) . -4782) (undo-tree-id48 . -1) (#("d" 0 1 (fontified t)) . -4783) (undo-tree-id49 . -1) (#("a" 0 1 (fontified t)) . -4784) (undo-tree-id50 . -1) 4785 (4781 . 4785)) nil (23428 228 990039 0) 0 nil]) ((nil rear-nonsticky nil 4770 . 4771) (#("
" 0 1 (fontified nil)) . -4782) (4762 . 4783) 4730) nil (23428 228 990044 0) 0 nil]) ((#("        print(outR)
" 0 8 (fontified t) 8 13 (fontified t face font-lock-keyword-face) 13 19 (fontified t) 19 20 (fontified t)) . 4763) (undo-tree-id51 . -20) (undo-tree-id52 . -20) (undo-tree-id53 . -20) (undo-tree-id54 . -8) 4771 (t 23428 185 0 0)) nil (23428 228 990049 0) 0 nil]) ((4726 . 4734) (#("    " 0 4 (fontified t)) . 4726) (undo-tree-id40 . -3) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -4) (undo-tree-id44 . -3) 4729) nil (23428 185 647487 0) 0 nil]) ((#("    " 0 4 (fontified t)) . -4730) (undo-tree-id45 . -4) 4734 (4726 . 4734)) nil (23428 185 647492 0) 0 nil]) ((nil rear-nonsticky nil 4753 . 4754) (nil fontified nil 4726 . 4754) (4726 . 4754)) nil (23428 185 647494 0) 0 nil]) ((#("        " 0 8 (fontified t)) . -4726) (undo-tree-id46 . -8) 4734 (4725 . 4734) 4677) nil (23428 185 647497 0) 0 nil] [nil nil ((nil rear-nonsticky nil 4705 . 4706) (nil fontified nil 4678 . 4706) (4678 . 4706) 4677) ((#("lineArr=f.read().split('\\n')" 0 7 (fontified nil face font-lock-variable-name-face) 7 23 (fontified nil) 23 24 (fontified nil syntax-table #1# face font-lock-string-face) 24 26 (fontified nil face font-lock-string-face) 26 27 (fontified nil syntax-table #1# face font-lock-string-face) 27 28 (fontified nil rear-nonsticky nil)) . 4678) (undo-tree-id34 . -27) (undo-tree-id35 . -27) (undo-tree-id36 . 1) (undo-tree-id37 . -28) (undo-tree-id38 . 6) (undo-tree-id39 . -23) (nil rear-nonsticky t 4705 . 4706)) (23428 176 142133 0) 0 nil]) ((#("    outR.close()
" 0 7 (fontified t) 7 8 (fontified t) 8 16 (fontified t) 16 17 (fontified t)) . 4746) (undo-tree-id18 . -16) (undo-tree-id19 . -16) (undo-tree-id20 . -17) (undo-tree-id21 . -17) (undo-tree-id22 . -4) (undo-tree-id23 . -1) (undo-tree-id24 . -17) (undo-tree-id25 . -16) (undo-tree-id26 . -16) (undo-tree-id27 . -4) (undo-tree-id28 . -4) (undo-tree-id29 . -16) 4750) nil (23428 176 142342 0) 0 nil]) ((4726 . 4734) (#("    " 0 4 (fontified t)) . 4726) (undo-tree-id30 . -4) (undo-tree-id31 . -4) 4730) nil (23428 176 142155 0) 0 nil]) ((4723 . 4724) (#("r" 0 1 (fontified t)) . 4723) (undo-tree-id32 . 1)) nil (23428 176 142157 0) 0 nil]) ((4720 . 4723)) nil (23428 176 142158 0) 0 nil]) ((#("f" 0 1 (fontified t)) . 4720)) nil (23428 176 142159 0) 0 nil]) ((4716 . 4723)) nil (23428 176 142161 0) 0 nil]) ((#("$" 0 1 (fontified t)) . -4686) (undo-tree-id33 . -1) 4687 (4686 . 4687) (4677 . 4686)) nil (23428 176 142163 0) 0 nil]) ((#("outR = open" 0 4 (fontified t face font-lock-variable-name-face) 4 5 (fontified t) 5 7 (fontified t) 7 11 (fontified t face font-lock-builtin-face)) . 4677) (t 23424 21085 0 0)) nil (23428 176 142165 0) 0 nil]) ((4732 . 4734) (4723 . 4732) (4718 . 4723) 4677) nil (23424 21085 443669 0) 0 nil]) ((#("    outR.writelines(cmd)
" 0 7 (fontified t) 7 8 (fontified t) 8 25 (fontified t)) . 4719) (undo-tree-id0 . -20) (undo-tree-id1 . -25) (undo-tree-id2 . -25) (undo-tree-id3 . -1) (undo-tree-id4 . -25) (undo-tree-id5 . -25) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -25) (undo-tree-id9 . -25) (undo-tree-id10 . -24) (undo-tree-id11 . -24) (undo-tree-id12 . -24) (undo-tree-id13 . -4) (undo-tree-id14 . -4) (undo-tree-id15 . -24) 4739) nil (23424 21085 443688 0) 0 nil]) ((nil fontified nil 4715 . 4716) (nil face font-lock-string-face 4715 . 4716) (4715 . 4716) (#("w" 0 1 (fontified t face font-lock-string-face)) . 4715)) nil (23424 21085 443692 0) 0 nil]) ((4709 . 4711) (#("e" 0 1 (fontified t face font-lock-string-face)) . -4709) (undo-tree-id16 . -1) 4710 (4708 . 4710)) nil (23424 21085 443695 0) 0 nil]) ((#("h" 0 1 (fontified t face font-lock-string-face)) . 4708)) nil (23424 21085 443696 0) 0 nil]) ((#("s" 0 1 (fontified t face font-lock-string-face)) . 4708)) nil (23424 21085 443697 0) 0 nil]) ((4700 . 4707)) nil (23424 21085 443698 0) 0 nil]) ((4743 . 4744) (#("F" 0 1 (fontified t)) . 4743)) nil (23424 21085 443699 0) 0 nil]) ((4718 . 4719) (#("F" 0 1 (fontified t)) . 4718)) nil (23424 21085 443700 0) 0 nil]) ((4681 . 4682) (#("j" 0 1 (fontified t face font-lock-variable-name-face)) . 4681) (undo-tree-id17 . -1) 4682 (#(" " 0 1 (fontified t)) . 4681) (4682 . 4683) 4681 (#("F" 0 1 (fontified t face font-lock-variable-name-face)) . 4680) (4681 . 4682) 4680) nil (23424 21085 443704 0) 0 nil]) ((nil rear-nonsticky nil 4676 . 4677) (#("
" 0 1 (fontified nil)) . -4752) (4672 . 4753) 4649 (t 23424 17838 0 0)) nil (23424 21085 443706 0) 0 nil]) nil nil (23424 21085 443707 0) 0 nil] #2# 33575 372 nil)